knitr::opts_chunk$set(eval = TRUE, results = FALSE, fig.show = "hide", message = FALSE)
library(tidyverse)
library(openintro)
library(GGally)
library(broom)
options(scipen = 999)
glimpse(evals)
data("evals")
force(evals)
data("evals")
write.csv(evals, 'evals.csv')
evals_data = read.csv('evals.csv')
evals = read.csv('evals.csv')
glimpse(evals)
evals %>%
ggplot(aes(x = score))+
geom_histogram()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_point()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter()
library(carData)
data("Prestige")
force(Prestige)
summary(Prestige)
car::scatterplotMatrix(~prestige+income+woman, data=Prestige,
main="Relationship between SAT Score and a set of exogenous variables",
smooth=list(span = 0.35,lty.smooth=1, col.smooth="red", col.var="red"),
regLine=list(col="green"))
car::scatterplotMatrix(~prestige+income+women, data=Prestige,
main="Relationship between SAT Score and a set of exogenous variables",
smooth=list(span = 0.35,lty.smooth=1, col.smooth="red", col.var="red"),
regLine=list(col="green"))
car::scatterplotMatrix(~prestige+education+income+women, data=Prestige,
main="Relationship between SAT Score and a set of exogenous variables",
smooth=list(span = 0.35,lty.smooth=1, col.smooth="red", col.var="red"),
regLine=list(col="green"))
evals = read.csv('evals')
evals = read.csv('evals.csv')
##Task 1
# a
plot(evals$bty_avg~evals$bty_f1lower)
plot(evals[, 13:19])
plot(evals[, 13:19])
colnames(evals)
##Task 1
# a
plot(evals$bty_avg~evals$bty_f1lower)
#b
lm01 = lm(score ~bty_f1lower+bty_f1upper+bty_f2upper+ bty_m1lower+ bty_m1upper+ bty_m2upper+bty_avg, data = evals)
library(carData);library(car)
install.packages("regclass")
library(carData);library(car);library(regclass)
vif(lm01)
library(carData);library(car);library(regclass)library(openintro)
evals = data("evals")
##Task 1
# a
plot(evals$bty_avg~evals$bty_f1lower)
data("evals")
force(evals)
data("evals")
force(evals)
##Task 1
# a
plot(evals$bty_avg~evals$bty_f1lower)
#b
lm01 = lm(score ~bty_f1lower+bty_f1upper+bty_f2upper+ bty_m1lower+ bty_m1upper+ bty_m2upper+bty_avg, data = evals)
vif(lm01)
car::scatterplotMatrix(~score+bty_avg+cls_perc_eval, data=evals,
main="Relationship between SAT Score and a set of exogenous variables",
smooth=list(span = 0.35,lty.smooth=1, col.smooth="red", col.var="red"),
regLine=list(col="green"))
#c
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
evals_aug2 <- augment(m_bty_gen)
evals_aug2 %>%
ggplot(aes(.resid))+
geom_histogram()
evals_aug2 %>%
ggplot(aes(x = .fitted, y = .resid))+
geom_point()
#d
evals_aug2 <- augment(m_bty_gen)
evals_aug2
evals_aug2 %>%
ggplot(aes(.resid))+
geom_histogram()
evals_aug2 %>%
ggplot(aes(x = .fitted, y = .resid))+
geom_point()
#d
hist(m_bty_gen$residuals)
#d
hist(m_bty_gen$residuals, main = 'Histogram of the residual')
plot(x = m_bty_gen$residuals, y = m_bty_gen$fitted.values)
plot(x = m_bty_gen$residuals, y = m_bty_gen$fitted.values,
x = 'residuals', y = 'fitted value')
plot(x = m_bty_gen$residuals, y = m_bty_gen$fitted.values,
x = 'residuals', y = 'fitted value')
plot(x = m_bty_gen$residuals, y = m_bty_gen$fitted.values,
xlab = 'residuals', ylab = 'fitted value')
summary(m_bty_gen)
#e
multiLines(m_bty_gen)
m_bty_rank <- evals %>%
lm(score ~ bty_avg+rank, data=.)
tidy(m_bty_rank)
#f
m_bty_rank = lm(score ~ bty_avg+rank, data=evals)
summary(m_bty_rank)
############################Task 02
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
#c
#provide interpretation for the coefficient associated with the ethnicity variable
m_rm = lm(score ~ rank + gender + ethnicity + language + age + cls_perc_eval +
+ cls_students + cls_level + cls_credits + bty_avg, data = evals)
summary(m_rm)
#b
summary(m_full)
summary(m_rm)
#d
backward_model <- step(full_model, direction = "backward")
#d
backward_model <- step(m_full, direction = "backward")
# View the summary of the best model
summary(backward_model)
#d
#d.backward model
backward_model <- step(m_full, direction = "backward")
summary(backward_model)
#d.forward model
# Start with a null model (intercept only)
null_model <- lm(score ~ 1, data = evals)
forward_model <- step(null_model, scope = formula(m_full), direction = "forward")
summary(forward_model)
#d.both model
# Stepwise selection (both directions)
stepwise_model <- step(null_model, scope = formula(m_full), direction = "both")
summary(stepwise_model)
# Compare AIC of all models
AIC(full_model, backward_model, forward_model, stepwise_model)
# Compare AIC of all models
AIC(m_full, backward_model, forward_model, stepwise_model)
#d
#d.backward model
backward_model <- step(m_full, direction = "backward")
summary(backward_model)
#d.forward model
# Start with a null model (intercept only)
null_model <- lm(score ~ 1, data = evals)
forward_model <- step(null_model, scope = formula(m_full), direction = "forward")
summary(forward_model)
# Compare AIC of all models
AIC(m_full, backward_model, forward_model, stepwise_model)
summary(stepwise_model)
summary(stepwise_model)
vif(backward_model)
plot(backward_model)
library(carData);library(car);library(regclass)library(openintro)
evals = read.csv('evals.csv')
##Task 1
# a
plot(evals$bty_avg~evals$bty_f1lower)
#b
lm01 = lm(score ~bty_f1lower+bty_f1upper+bty_f2upper+ bty_m1lower+ bty_m1upper+ bty_m2upper+bty_avg, data = evals)
vif(lm01)
#c
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
#f
m_bty_rank = lm(score ~ bty_avg+rank, data=evals)
summary(m_bty_rank)
############################Task 02
#a
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
#b
summary(m_full)
#d
#d.backward model
backward_model <- step(m_full, direction = "backward")
summary(backward_model)
#d.forward model
# Start with a null model (intercept only)
null_model <- lm(score ~ 1, data = evals)
forward_model <- step(null_model, scope = formula(m_full), direction = "forward")
summary(forward_model)
install.packages("leaps")
library(carData);library(car);library(regclass)library(openintro);library(leaps)
library(carData);library(car);library(regclass)library(openintro);library(leaps)
library(carData);library(car);library(regclass);library(openintro);library(leaps)
#d
#d.backward model
backward_model <- stepAIC(m_full, direction = "backward")
#d
#d.backward model
backward_model <- stepAIC(m_full, direction = "backward")
library(carData);library(car);library(regclass);library(openintro);library(MASS)
#d
#d.backward model
backward_model <- stepAIC(m_full, direction = "backward")
summary(backward_model)
#d
#d.backward model
backward_model <- stepAIC(m_full, direction = "backward")
#d.forward model
# Start with a null model (intercept only)
forward_model <- stepAIC(m_full, direction = "forward")
summary(forward_model)
#d.both model
# Stepwise selection (both directions)
stepwise_model <- stepAIC(m_full, direction = "both")
summary(stepwise_model)
# Compare AIC of all models
AIC(m_full, backward_model, forward_model, stepwise_model)
#d.both model
# Stepwise selection (both directions)
both_model <- stepAIC(m_full, direction = "both")
summary(both_model)
# Compare AIC of all models
AIC(m_full, backward_model, forward_model, both_model)
summary(backward_model)
summary(both_model)
# Compare AIC of all models
AIC(m_full, backward_model, forward_model, both_model)
summary(backward_model)
# Compare AIC of all models
AIC(m_full, backward_model, forward_model, both_model)
summary(backward_model)
#d
#d.backward model
backward_model <- stepAIC(m_full, direction = "backward")
summary(backward_model)
#d.forward model
# Start with a null model (intercept only)
forward_model <- stepAIC(m_full, direction = "forward")
summary(forward_model)
#d.both model
# Stepwise selection (both directions)
both_model <- stepAIC(m_full, direction = "both")
summary(both_model)
#d
#d.backward model
backward_model <- stepAIC(m_full, direction = "backward")
# Compare AIC of all models
AIC(m_full, backward_model, forward_model, both_model)
# Compare AIC of all models
AIC(m_full)
AIC(backward_model)
backward_model
#d
#d.backward model
backward_model <- stepAIC(m_full, direction = "backward")
#d.forward model
# Start with a null model (intercept only)
null_model = lm(score ~ ., data = evals)
forward_model <- stepAIC(null_model, direction = "forward", scope = m_full)
summary(forward_model)
#d.forward model
# Start with a null model (intercept only)
null_model = lm(score ~ 1, data = evals)
forward_model <- stepAIC(null_model, direction = "forward",
scope = list(upper = ~rank * ethnicity * gender * language * age * cls_perc_eval
* cls_students * cls_level * cls_profs * cls_credits * bty_avg
* pic_outfit * pic_color, lower = ~1))
summary(forward_model)
#d.forward model
# Start with a null model (intercept only)
null_model = lm(score ~ 1, data = evals)
forward_model <- stepAIC(null_model, direction = "forward",
scope = list(upper = ~rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, lower = ~1))
summary(forward_model)
#d.both model
# Stepwise selection (both directions)
both_model <- stepAIC(m_full, direction = "both")
summary(both_model)
# Compare AIC of all models
AIC(m_full)
AIC(backward_model)
# Compare AIC of all models
AIC(m_full, backward_model, forward_model,both_model)
forward_model
forward_model <- stepAIC(null_model, direction = "forward",
scope = list(upper = ~rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, lower = ~1))
