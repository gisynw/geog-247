group = "Water Quality"
) %>%
addLegend(data = tf_water,
position = "bottomleft",
pal = palette_pts,
values = ~SURVEYTYPE,
title = "Survey Type",
opacity = 1) %>%
addPolygons(data = tf_pond,  color = "blue", label = tf_pond$NAME, fillOpacity = 1,group = "Water Pond") %>%
addLayersControl(baseGroups = c("OpenTopo", "StamenToner"), overlayGroups = c("Water Pond", "Winter Parking","Water Quality"),
position = "topright")
library(htmlwidgets)
saveWidget(final_map, "F:\\Clark_Universiy\\Clark_Teaching\\Git_Repo\\ssj-30262\\docs\\Lectures\\Week06_R_Mapping\\leaflet_map_R.html", selfcontained = TRUE)
final_map = leaflet() %>%
addProviderTiles(
"CartoDB.Positron",
group = "OpenTopo"
) %>%
addProviderTiles(
"OpenStreetMap.Mapnik",
group = "OpenStreetMap"
) %>%
addPolylines(data = tf_line,
color = ~palette_line(BanType),
weight = 2,
label = ~BanType,
group = "Winter Parking"
) %>%
addLegend(data = tf_line,
position = "bottomright",
pal = palette_line,
values = ~BanType,
title = "Ban Type",
opacity = 1) %>%
addCircleMarkers(
data = tf_water,
fillColor  = ~palette_pts(SURVEYTYPE),  # Color based on the 'category' column
fillOpacity = 0.8,           # Adjust opacity
radius = 5,                  # Set marker size
stroke = TRUE,               # Add stroke to the markers
weight = 1,                   # Set stroke weight
color = "#000000",
label = tf_water$SURVEYTYPE,
group = "Water Quality"
) %>%
addLegend(data = tf_water,
position = "bottomleft",
pal = palette_pts,
values = ~SURVEYTYPE,
title = "Survey Type",
opacity = 1) %>%
addPolygons(data = tf_pond,  color = "blue", label = tf_pond$NAME, fillOpacity = 1,group = "Water Pond") %>%
addLayersControl(baseGroups = c("OpenTopo", "StamenToner"), overlayGroups = c("Water Pond", "Winter Parking","Water Quality"),
position = "topright")
library(htmlwidgets)
saveWidget(final_map, "F:\\Clark_Universiy\\Clark_Teaching\\Git_Repo\\ssj-30262\\docs\\Lectures\\Week06_R_Mapping\\leaflet_map_R.html", selfcontained = TRUE)
# if (!require('leaflet')) install.packages('leaflet')
#
# library(leaflet)
basemap <- leaflet() %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB"
)  %>%
addProviderTiles(
"OpenStreetMap",
# give the layer a name
group = "OpenStreetMap"
)
basemap
# CRAN version
if (!require('leaflet')) install.packages('leaflet')
# Or Github version
if (!require('devtools')) install.packages('devtools')
# devtools::install_github('rstudio/leaflet')
# Or manually load packages in R
# Packages - Install
library(shiny)
install.packages("shiny")
library(shiny)
# Define student names based on your provided list
students <- c("Mst Sanjida Alam", "Aidan Caron", "Aedan Coulter", "Brody Fish",
"Antonio Galvao da Fonseca", "Sasha Gannon", "JJ Gifford", "Denys Godwin",
"Sophie Hayes", "Noah Kantor", "Pacifique Madibi", "Annan Shrestha",
"Bikal Shrestha", "Tevita Soqo", "Annemaire Walsh")
library(shiny)
# Define UI for the Shiny app
ui <- fluidPage(
titlePanel("Student Call System"),
sidebarLayout(
sidebarPanel(
actionButton("call_button", "Call a Random Student"),
actionButton("show_history", "Show Call History"),
actionButton("histogram", "Show Histogram")
),
mainPanel(
verbatimTextOutput("selected_student"),
tableOutput("history"),
plotOutput("histogram")
)
)
)
# Server logic
server <- function(input, output, session) {
# Reactive value to store called students
called_students <- reactiveVal(character(0))
# Action for calling a random student
observeEvent(input$call_button, {
chosen_student <- sample(students, 1)
new_list <- c(called_students(), chosen_student)
called_students(new = new_list <- c(called_students(), chosen_student))
showNotification(paste("Called:", chosen_student))
})
# Show the call history
observeEvent(input$show_history, {
output$history_table <- renderTable({
data.frame("Called Students" = called_students())
})
})
# Update the called_students when a student is called
observeEvent(input$call_button, {
updated_list <- c(called_students(), sample(students, 1))
called_students(updated_list)
})
# Display the last called student
output$selected_student <- renderText({
last_student <- tail(called_students(), 1)
if(length(last_student) == 0){
"No student has been called yet."
} else {
paste("Last Called Student:", last_student)
}
})
# Plot histogram showing frequency of students being called
observeEvent(input$histogram, {
output$histogram <- renderPlot({
if(length(called_students()) > 0){
hist_data <- table(called_students())
barplot(hist_data, main="Frequency Histogram",
xlab="Students", ylab="Frequency",
las=2, col="skyblue")
}
})
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
# Define student names based on your provided list
students <- c("Mst Sanjida Alam", "Aidan Caron", "Aedan Coulter", "Brody Fish",
"Antonio Galvao da Fonseca", "Sasha Gannon", "JJ Gifford", "Denys Godwin",
"Sophie Hayes", "Noah Kantor", "Pacifique Madibi", "Annan Shrestha",
"Bikal Shrestha", "Tevita Soqo", "Annemaire Walsh")
library(shiny)
# Define UI for the Shiny app
ui <- fluidPage(
titlePanel("Student Call System"),
sidebarLayout(
sidebarPanel(
actionButton("call_button", "Call a Random Student"),
actionButton("show_history", "Show Call History"),
actionButton("histogram_btn", "Show Histogram")
),
mainPanel(
verbatimTextOutput("selected_student"),
tableOutput("history_table"),
plotOutput("histogram_plot")
)
)
)
# Server logic
server <- function(input, output, session) {
# Reactive value to store called students
called_students <- reactiveVal(character(0))
# Action for calling a random student
observeEvent(input$call_button, {
chosen_student <- sample(students, 1)
new_list <- c(called_students(), chosen_student)
called_students(new_list)
output$selected_student <- renderText({
paste("Last Called Student:", chosen_student)
})
})
# Show call history
observeEvent(input$show_history, {
output$history_table <- renderTable({
if (length(called_students()) == 0){
data.frame("Called Students" = "No students called yet.")
} else {
data.frame("Called Students" = called_students())
}
})
})
# Plot histogram showing frequency of students being called
observeEvent(input$histogram_btn, {
output$histogram_plot <- renderPlot({
if(length(called_students()) > 0){
hist_data <- table(called_students())
barplot(hist_data, main="Frequency Histogram",
xlab="Students", ylab="Frequency",
las=2, col="skyblue")
} else {
plot.new()
text(0.5, 0.5, "No students have been called yet.")
}
})
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
# Define student names based on your provided list
students <- c("Mst Sanjida Alam", "Aidan Caron", "Aedan Coulter", "Brody Fish",
"Antonio Galvao da Fonseca", "Sasha Gannon", "JJ Gifford", "Denys Godwin",
"Sophie Hayes", "Noah Kantor", "Pacifique Madibi", "Annan Shrestha",
"Bikal Shrestha", "Tevita Soqo", "Annemaire Walsh")
library(shiny)
# Define UI for the Shiny app
ui <- fluidPage(
titlePanel("Student Call System"),
sidebarLayout(
sidebarPanel(
actionButton("call_button", "Call a Random Student"),
actionButton("show_history", "Show Call History"),
actionButton("histogram_btn", "Show Histogram")
),
mainPanel(
verbatimTextOutput("selected_student"),
tableOutput("history_table"),
plotOutput("histogram_plot")
)
)
)
# Server logic
server <- function(input, output, session) {
# Reactive value to store called students
called_students <- reactiveVal(character(0))
# Action for calling a random student
observeEvent(input$call_button, {
chosen_student <- sample(students, 1)
new_list <- c(called_students(), chosen_student)
called_students(new_list)
output$selected_student <- renderText({
paste("Last Called Student:", chosen_student)
})
})
# Show call history
observeEvent(input$show_history, {
output$history_table <- renderTable({
if (length(called_students()) == 0){
data.frame("Called Students" = "No students called yet.")
} else {
data.frame("Called Students" = called_students())
}
})
})
# Plot histogram showing frequency of students being called
observeEvent(input$histogram_btn, {
output$histogram_plot <- renderPlot({
if(length(called_students()) > 0){
hist_data <- table(called_students())
par(mar=c(10,5,4,2))
barplot(hist_data,
main="Frequency Histogram",
ylab="Frequency",
las=2,
col="skyblue",
cex.names=0.8)
mtext("Students", side=1, line=8, cex=1)
} else {
plot.new()
text(0.5, 0.5, "No students have been called yet.")
}
})
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
# Define student names based on your provided list
students <- c("Sanjida Alam", "Aidan Caron", "Aedan Coulter", "Brody Fish",
"Antonio Galvao da Fonseca", "Sasha Gannon", "JJ Gifford", "Denys Godwin",
"Sophie Hayes", "Noah Kantor", "Pacifique Madibi","Kurt McAuliffe","Kalu Okigwe",
"Sunita Phuyal","Annan Shrestha","Bikal Shrestha", "Tevita Soqo", "Annemaire Walsh")
library(shiny)
# Define UI for the Shiny app
ui <- fluidPage(
titlePanel("Student Call System"),
sidebarLayout(
sidebarPanel(
actionButton("call_button", "Call a Random Student"),
actionButton("show_history", "Show Call History"),
actionButton("histogram_btn", "Show Histogram")
),
mainPanel(
verbatimTextOutput("selected_student"),
tableOutput("history_table"),
plotOutput("histogram_plot")
)
)
)
# Server logic
server <- function(input, output, session) {
# Reactive value to store called students
called_students <- reactiveVal(character(0))
# Action for calling a random student
observeEvent(input$call_button, {
chosen_student <- sample(students, 1)
new_list <- c(called_students(), chosen_student)
called_students(new_list)
output$selected_student <- renderText({
paste("Last Called Student:", chosen_student)
})
})
# Show call history
observeEvent(input$show_history, {
output$history_table <- renderTable({
if (length(called_students()) == 0){
data.frame("Called Students" = "No students called yet.")
} else {
data.frame("Called Students" = called_students())
}
})
})
# Plot histogram showing frequency of students being called
observeEvent(input$histogram_btn, {
output$histogram_plot <- renderPlot({
if(length(called_students()) > 0){
hist_data <- table(called_students())
par(mar=c(10,5,4,2))
barplot(hist_data,
main="Frequency Histogram",
ylab="Frequency",
las=2,
col="skyblue",
cex.names=0.8)
mtext("Students", side=1, line=8, cex=1)
} else {
plot.new()
text(0.5, 0.5, "No students have been called yet.")
}
})
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(carData);library(car);library(regclass);library(openintro);library(MASS)
setwd('D:\\Teaching_Clark\\GitRepo\\Spring2025\\geog-247-statistics\\docs\\Labs\\Lab03')
library(carData);library(car);library(regclass);library(openintro);library(MASS)
setwd('E:\\Clark\\Spring2025\\Github_Courses\\geog-247_Statistics\\docs\\Labs\\Lab03')
evals = read.csv('evals.csv')
##Task 1
# a
plot(evals$bty_avg~evals$bty_f1lower)
#b
lm01 = lm(score ~bty_f1lower+bty_f1upper+bty_f2upper+ bty_m1lower+ bty_m1upper+ bty_m2upper+bty_avg, data = evals)
vif(lm01)
#c
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
#d
hist(m_bty_gen$residuals, main = 'Histogram of the residual')
plot(x = m_bty_gen$residuals, y = m_bty_gen$fitted.values,
xlab = 'residuals', ylab = 'fitted value')
#e
#provide equation corresponding to males
#f
m_bty_rank = lm(score ~ bty_avg+rank, data=evals)
summary(m_bty_rank)
############################Task 02
#a
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
#b
summary(m_full)
#c
#provide interpretation for the coefficient associated with the ethnicity variable
#d
# d best subset model
best_subset <- regsubsets(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals, nbest = 1, nvmax = 13)
summary_best <- summary(best_subset)
best_model_index <- which.min(summary_best$cp)
best_variables <- names(which(summary_best$which[best_model_index,]))
cat("Best model has", best_model_index, "predictors with lowest C_P:", max(summary_best$cp), "\n")
#d.backward model
# Perform backward elimination using AIC
full_model = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
backward_model <- step(full_model,direction = "backward")
summary_backward <- summary(backward_model)
#d.forward model
forward_model  = regsubsets(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals, nvmax = 13, method = 'forward')
summary_forward <- summary(forward_model)
best_model_index <- which.min(summary_forward$cp)
best_variables <- names(which(summary_forward$which[best_model_index,]))
cat("Best model has", best_model_index, "predictors with lowest C_P:", max(summary_forward$cp), "\n")
# final model
final_model = lm(score ~  ethnicity + gender + language + age + cls_perc_eval+  cls_credits + bty_avg+ pic_outfit + pic_color, data = evals)
summary(final_model)
#d.forward model
forward_model  = regsubsets(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals, nvmax = 13, method = 'forward')
summary_forward <- summary(forward_model)
summary_forward
#d.forward model
forward_model  = regsubsets(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals, nvmax = 13, method = 'backfoward')
#d.forward model
forward_model  = regsubsets(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals, nvmax = 13, method = 'backward')
summary_forward <- summary(forward_model)
summary_forward
#d.forward model
forward_model  = regsubsets(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals, nvmax = 13, method = 'forward')
AIC(forward_model)
library(carData);library(car);library(regclass);library(openintro);library(MASS)
setwd('E:\\Clark\\Spring2025\\Github_Courses\\geog-247_Statistics\\docs\\Labs\\Lab03')
evals = read.csv('evals.csv')
##Task 1
# a
plot(evals$bty_avg~evals$bty_f1lower)
#b
lm01 = lm(score ~bty_f1lower+bty_f1upper+bty_f2upper+ bty_m1lower+ bty_m1upper+ bty_m2upper+bty_avg, data = evals)
vif(lm01)
#c
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
#d
hist(m_bty_gen$residuals, main = 'Histogram of the residual')
plot(x = m_bty_gen$residuals, y = m_bty_gen$fitted.values,
xlab = 'residuals', ylab = 'fitted value')
#e
#provide equation corresponding to males
#f
m_bty_rank = lm(score ~ bty_avg+rank, data=evals)
summary(m_bty_rank)
############################Task 02
#a
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
#b
summary(m_full)
#c
#provide interpretation for the coefficient associated with the ethnicity variable
#d
# d best subset model
best_subset <- regsubsets(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals, nbest = 1, nvmax = 13)
summary_best <- summary(best_subset)
best_model_index <- which.min(summary_best$cp)
best_variables <- names(which(summary_best$which[best_model_index,]))
cat("Best model has", best_model_index, "predictors with lowest C_P:", max(summary_best$cp), "\n")
#d.backward model
# Perform backward elimination using AIC
full_model = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
backward_model <- step(full_model,direction = "backward")
summary_backward <- summary(backward_model)
#d.forward model
forward_model  = regsubsets(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals, nvmax = 13, method = 'forward')
AIC(forward_model)
#d
# d best subset model
best_subset <- regsubsets(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals, nbest = 1, nvmax = 13)
summary_best <- summary(best_subset)
best_model_index <- which.min(summary_best$cp)
best_variables <- names(which(summary_best$which[best_model_index,]))
cat("Best model has", best_model_index, "predictors with lowest C_P:", max(summary_best$cp), "\n")
summary_best$cp
summary_best <- summary(best_subset)
summary_best
best_model_index
best_variables
summary_best$cp
#d.backward model
# Perform backward elimination using AIC
full_model = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
backward_model <- step(full_model,direction = "backward")
cat("Best model has", best_model_index, "predictors with lowest C_P:", max(summary_best$cp), "\n")
best_variables
#d
# d best subset model
best_subset <- regsubsets(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals, nbest = 1, nvmax = 13)
best_subset
summary_best <- summary(best_subset)
best_model_index <- which.min(summary_best$cp)
best_variables <- names(which(summary_best$which[best_model_index,]))
cat("Best model has", best_model_index, "predictors with lowest C_P:", max(summary_best$cp), "\n")
best_model_index
best_variables
