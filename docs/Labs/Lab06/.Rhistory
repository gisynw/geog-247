geom_point() +
scale_color_viridis_c(direction = -1) +  # Use a color gradient similar to the provided image
labs(x = "Years", y = "Hits", title = "Years vs Hits in Hitters Dataset") +
theme_minimal()
ggplot(Hitters, aes(x = Years, y = Hits, color = Salary)) +
geom_point() +
geom_vline(xintercept = 4.5, linetype = "dashed", color = "black", size = 1) + # Vertical line
geom_hline(yintercept = 117.5, linetype = "dashed", color = "black", size = 1) +
scale_color_viridis_c(direction = -1) +  # Use a color gradient similar to the provided image
labs(x = "Years", y = "Hits", title = "Years vs Hits in Hitters Dataset") +
theme_minimal()
ggplot(Hitters, aes(x = Years, y = Hits, color = Salary)) +
geom_point() +
# geom_vline(xintercept = 4.5, linetype = "dashed", color = "black", size = 1) + # Vertical line
# geom_hline(yintercept = 117.5, linetype = "dashed", color = "black", size = 1) +
scale_color_viridis_c(direction = -1) +  # Use a color gradient similar to the provided image
labs(x = "Years", y = "Hits", title = "Years vs Hits in Hitters Dataset") +
theme_minimal()
salary = log(Hitters$Salary)
ggplot(Hitters, aes(x = Years, y = Hits, color = salary)) +
geom_point() +
# geom_vline(xintercept = 4.5, linetype = "dashed", color = "black", size = 1) + # Vertical line
# geom_hline(yintercept = 117.5, linetype = "dashed", color = "black", size = 1) +
scale_color_viridis_c(direction = -1) +  # Use a color gradient similar to the provided image
labs(x = "Years", y = "Hits", title = "Years vs Hits in Hitters Dataset") +
theme_minimal()
x  = log(5)
values = exp(x)
print(values)
x  = log(25)
values = exp(x)
print(values)
train = sample(1:nrow(Hitters), nrow(Hitters)/2)
summary(tree.sub_data)
set.seed(1)
sub_data = Hitters[,c('salary', 'Years', 'RBI', 'Putouts', 'Runs', 'Walks', 'RBI', 'Hits')]
sub_data = Hitters[,c('salary', 'Years', 'RBI', 'PutOuts', 'Runs', 'Walks', 'RBI', 'Hits')]
set.seed(1)
sub_data = Hitters[,c('salary', 'Years', 'RBI', 'PutOuts', 'Runs', 'Walks', 'RBI', 'Hits')]
colnames(Hitters)
set.seed(1)
sub_data = Hitters[,c('salary', 'Years', 'RBI', 'PutOuts', 'Runs', 'Walks', 'RBI', 'Hits')]
Hitters$salary = log(Hitters$Salary)
set.seed(1)
sub_data = Hitters[,c('salary', 'Years', 'RBI', 'PutOuts', 'Runs', 'Walks', 'RBI', 'Hits')]
train = sample(1:nrow(sub_data), nrow(sub_data)/2)
tree.sub_data = tree(salary~,sub_data, subset = train)
set.seed(1)
sub_data = Hitters[,c('salary', 'Years', 'RBI', 'PutOuts', 'Runs', 'Walks', 'RBI', 'Hits')]
train = sample(1:nrow(sub_data), nrow(sub_data)/2)
tree.sub_data = tree(salary~.,sub_data, subset = train)
library(MASS)
set.seed(1)
sub_data = Hitters[,c('salary', 'Years', 'RBI', 'PutOuts', 'Runs', 'Walks', 'RBI', 'Hits')]
train = sample(1:nrow(sub_data), nrow(sub_data)/2)
tree.sub_data = tree(salary~.,sub_data, subset = train)
install.packages("tree")
library(MASS);library(tree)
set.seed(1)
sub_data = Hitters[,c('salary', 'Years', 'RBI', 'PutOuts', 'Runs', 'Walks', 'RBI', 'Hits')]
train = sample(1:nrow(sub_data), nrow(sub_data)/2)
tree.sub_data = tree(salary~.,sub_data, subset = train)
summary(tree.sub_data)
plot(tree.sub_data)
plot(tree.sub_data)
plot(tree.sub_data)
text(tree.sub_data, pretty =0)
text(tree.sub_data, pretty =0)
plot(tree.sub_data)
text(tree.sub_data, pretty =0)
cv.prune=cv.tree(tree.sub_data)
plot(cv.prune$size ,cv.prune$dev ,type='b')
cv.prune=cv.tree(tree.sub_data)
plot(cv.prune$size ,cv.prune$dev ,type='b')
cv.prune=cv.tree(tree.sub_data)
plot(cv.prune$size ,cv.prune$dev ,type='b', x = 'Mean Square Error', y = 'Tree Size')
cv.prune=cv.tree(tree.sub_data)
plot(cv.prune$size ,cv.prune$dev ,type='b', xlab = 'Mean Square Error', ylab = 'Tree Size')
prune.hitter=prune.tree(tree.sub_data ,best=3)
plot(prune.hitter)
text(prune.hitter , pretty =0)
yhat=predict (tree.sub_data ,newdata=sub_data[-train ,])
hitter.test=sub_data[-train ,"salary"]
plot(yhat ,hitter.test)
abline (0,1)
mean((yhat -hitter.test)^2)
yhat
hitter.test
Hitters$salary = log(Hitters$Salary)
new_Hitters = na.omit(Hitters)
Hitters$salary = log(Hitters$Salary)
new_Hitters = na.omit(Hitters)
library(MASS);library(tree)
set.seed(1)
sub_data = new_Hitters[,c('salary', 'Years', 'RBI', 'PutOuts', 'Runs', 'Walks', 'RBI', 'Hits')]
train = sample(1:nrow(sub_data), nrow(sub_data)/2)
tree.sub_data = tree(salary~.,sub_data, subset = train)
summary(tree.sub_data)
plot(tree.sub_data)
text(tree.sub_data, pretty =0)
cv.prune=cv.tree(tree.sub_data)
plot(cv.prune$size ,cv.prune$dev ,type='b', xlab = 'Mean Square Error', ylab = 'Tree Size')
prune.hitter=prune.tree(tree.sub_data ,best=3)
plot(prune.hitter)
text(prune.hitter , pretty =0)
yhat=predict (tree.sub_data ,newdata=sub_data[-train ,])
hitter.test=sub_data[-train ,"salary"]
plot(yhat ,hitter.test)
abline (0,1)
mean((yhat -hitter.test)^2)
yhat=predict (prune.hitter ,newdata=sub_data[-train ,])
hitter.test=sub_data[-train ,"salary"]
plot(yhat ,hitter.test)
abline (0,1)
mean((yhat -hitter.test)^2)
prune.hitter=prune.tree(tree.sub_data ,best=4)
plot(prune.hitter)
text(prune.hitter , pretty =0)
yhat=predict (tree.sub_data ,newdata=sub_data[-train ,])
hitter.test=sub_data[-train ,"salary"]
plot(yhat ,hitter.test)
abline (0,1)
mean((yhat -hitter.test)^2)
yhat=predict (prune.hitter ,newdata=sub_data[-train ,])
hitter.test=sub_data[-train ,"salary"]
plot(yhat ,hitter.test)
abline (0,1)
mean((yhat -hitter.test)^2)
prune.hitter=prune.tree(tree.sub_data ,best=4)
plot(prune.hitter)
text(prune.hitter , pretty =0)
prune.hitter=prune.tree(tree.sub_data ,best=4)
plot(prune.hitter)
text(prune.hitter , pretty =0)
yhat=predict (tree.sub_data ,newdata=sub_data[-train ,])
hitter.test=sub_data[-train ,"salary"]
plot(yhat ,hitter.test)
abline (0,1)
mean((yhat -hitter.test)^2)
yhat=predict (prune.hitter ,newdata=sub_data[-train ,])
hitter.test=sub_data[-train ,"salary"]
plot(yhat ,hitter.test)
abline (0,1)
mean((yhat -hitter.test)^2)
yhat=predict (tree.sub_data ,newdata=sub_data[-train ,])
hitter.test=sub_data[-train ,"salary"]
plot(yhat ,hitter.test)
abline (0,1)
mean((yhat -hitter.test)^2)
cv.prune=cv.tree(tree.sub_data, K = 5)
plot(cv.prune$size ,cv.prune$dev ,type='b', xlab = 'Mean Square Error', ylab = 'Tree Size')
cv.prune=cv.tree(tree.sub_data, K = 5)
plot(cv.prune$size ,cv.prune$dev ,type='b', xlab = 'Mean Square Error', ylab = 'Tree Size')
cv.prune=cv.tree(tree.sub_data, K = 5)
plot(cv.prune$size ,cv.prune$dev ,type='b', xlab = 'Mean Square Error', ylab = 'Tree Size')
set.seed(10)
cv.prune=cv.tree(tree.sub_data, K = 5)
plot(cv.prune$size ,cv.prune$dev ,type='b', xlab = 'Mean Square Error', ylab = 'Tree Size')
prune.hitter=prune.tree(tree.sub_data ,best=5)
plot(prune.hitter)
text(prune.hitter , pretty =0)
yhat=predict (tree.sub_data ,newdata=sub_data[-train ,])
hitter.test=sub_data[-train ,"salary"]
plot(yhat ,hitter.test)
abline (0,1)
mean((yhat -hitter.test)^2)
yhat=predict (prune.hitter ,newdata=sub_data[-train ,])
hitter.test=sub_data[-train ,"salary"]
plot(yhat ,hitter.test)
abline (0,1)
mean((yhat -hitter.test)^2)
print(cv.prune)  # Check cross-validation results
set.seed(10)
cv.prune=cv.tree(tree.sub_data, K = 5)
plot(cv.prune$size ,cv.prune$dev ,type='b', xlab = 'Mean Square Error', ylab = 'Tree Size')
set.seed(10)
cv.prune=cv.tree(tree.sub_data, K = 5)
plot(cv.prune$size ,cv.prune$dev ,type='b', xlab = 'Mean Square Error', ylab = 'Tree Size')
set.seed(10)
cv.prune=cv.tree(tree.sub_data, K = 5)
plot(cv.prune$size ,cv.prune$dev ,type='b', xlab = 'Mean Square Error', ylab = 'Tree Size')
print(cv.prune)  # Check cross-validation results
set.seed(6)
cv.prune=cv.tree(tree.sub_data, K = 5)
plot(cv.prune$size ,cv.prune$dev ,type='b', xlab = 'Mean Square Error', ylab = 'Tree Size')
set.seed(6)
cv.prune=cv.tree(tree.sub_data, K = 5)
plot(cv.prune$size ,cv.prune$dev ,type='b', xlab = 'Mean Square Error', ylab = 'Tree Size')
print(cv.prune)  # Check cross-validation results
print(cv.prune)  # Check cross-validation results
set.seed(10)
cv.prune=cv.tree(tree.sub_data, K = 5)
plot(cv.prune$size ,cv.prune$dev ,type='b', xlab = 'Mean Square Error', ylab = 'Tree Size')
print(cv.prune)  # Check cross-validation results
set.seed(3)
cv.prune=cv.tree(tree.sub_data, K = 5)
plot(cv.prune$size ,cv.prune$dev ,type='b', xlab = 'Mean Square Error', ylab = 'Tree Size')
print(cv.prune)  # Check cross-validation results
prune.hitter=prune.tree(tree.sub_data ,best=4)
plot(prune.hitter)
text(prune.hitter , pretty =0)
set.seed(10)
cv.prune=cv.tree(tree.sub_data, K = 5)
plot(cv.prune$size ,cv.prune$dev ,type='b', xlab = 'Mean Square Error', ylab = 'Tree Size')
print(cv.prune)  # Check cross-validation results
prune.hitter=prune.tree(tree.sub_data ,best=9)
plot(prune.hitter)
text(prune.hitter , pretty =0)
library(tree)
install.packages("tree")
library(tree);library(ISLR)
install.packages("ISLR")
library(tree);library(ISLR)
library(tree);library(ISLR)
data("Carseats")
force(Carseats)
attach(Carseats)
Carseats$High = ifelse(Carseats$Sales<=8, 'No', 'Yes')
Carseats$High
## tree based classification
tree.carseats = tree(High~.-Sales, Carsetas)
## tree based classification
tree.carseats = tree(High~.-Sales, Carseats)
Carseats$High
View(Carseats)
new_carsetas = na.omit(Carseats)
## tree based classification
tree.carseats = tree(High~.-Sales, Carseats)
summary(tree.carseats)
tree.carseats
sum(is.na(Carseats))
str(Carseats$High)
High= ifelse (Sales <=8 ," No"," Yes ")
data("Carseats")
High= ifelse (Sales <=8 ," No"," Yes ")
Carseats = data. frame (Carseats , High)
Carseats = data.frame (Carseats , High)
## tree based classification
tree.carseats = tree(High~.-Sales, Carseats)
View(Carseats)
High= ifelse (Sales <=8 ," No"," Yes ")
data("Carseats")
High= ifelse (Sales <=8 ," No"," Yes ")
Carseats = data.frame (Carseats , as.factor(High))
## tree based classification
tree.carseats = tree(High~.-Sales, Carseats)
as.factor(High)
High = as.factor(High)
data("Carseats")
High= ifelse (Sales <=8 ," No"," Yes ")
High = as.factor(High)
Carseats = data.frame (Carseats , High)
## tree based classification
tree.carseats = tree(High~.-Sales, Carseats)
summary(tree.carseats)
plot(tree.carseats )
text(tree.carseats ,pretty =0)
tree.carseats
summary(tree.carseats)
tree.carseats$frame$yprob
apply(node_probs, 1, max)
## classificiation error rate
node_probs <- tree.carseats$frame$yprob
apply(node_probs, 1, max)
error_rate = 1 - apply(node_probs, 1, max)
error_rate
summary(tree.carseats)
error_rate
## Gini index
# Compute Gini index for each node
gini_index <- apply(node_probs, 1, function(p) 1 - sum(p^2))
gini_index
set.seed(2)
train = sample(1: nrow(Carseats), 200)
Carseats.test= Carseats [-train ,]
train
train = sample(1: nrow(Carseats), 200)
Carseats.test= Carseats[-train ,]
test_observed =High[-train ]
tree.carseats =tree(High~.-Sales , Carseats , subset =train )
tree.pred = predict(tree.carseats , Carseats.test ,type ="class")
table (tree.pred ,test_observed)
##cross validation
set.seed (3)
cv.carseats =cv.tree(tree.carseats,FUN = prune.misclass)
names(cv.carseats)
tree.carseats
summary(tree.carseats)
names(cv.carseats)
cv.carseats
files = read.csv('F:\\Clark_Projects\\NSF_FAIROS_2025\\Questionaire\\response.csv')
files$Please.select.your.main.purpose.or.field.s..for.using.historical.maps
for i in c(8,9,10,11):
for (i in c(8,9,10,11)):
files[,8]
files[,8][1]
strsplit(files[,8][1], ",\\s*"))
strsplit(files[,8][1], ",\\s*")
files[,8] %>%
mutate(description = strsplit(as.character(description), ",\\s*")) %>%
unnest(description)
strsplit(files[,8][1], ",\\s*")
new_df = files %>%
mutate(description = strsplit(as.character(description), ",\\s*")) %>%
unnest(description)
new_df = files %>%
mutate(description = strsplit(as.character(description), ",\\s*")) %>%
unnest(description)
library(dplyr);library(tidyr)
files = read.csv('F:\\Clark_Projects\\NSF_FAIROS_2025\\Questionaire\\response.csv')
new_df = files %>%
mutate(description = strsplit(as.character(description), ",\\s*")) %>%
unnest(description)
colnames(files) <- c(
"Timestamp",
"Email",
"Organization",
"Stakeholder_Type",
"Used_Hist_Maps",
"Hist_Map_Types",
"Main_Purpose",
"Interested_Products",
"Data_Access_Method",
"Preferred_Formats",
"Metadata_Standards",
"Interested_Collaboration",
"Willing_Feedback",
"Participate_Training",
"Additional_Resources",
"Additional_Comments"
)
new_df = files %>%
mutate(Hist_Map_Types = strsplit(as.character(Hist_Map_Types), ",\\s*")) %>%
unnest(Hist_Map_Types)
new_df
View(new_df)
# Example for multiple columns with different lengths:
new_df <- files %>%
separate_rows(Hist_Map_Types, Interested_Products, Preferred_Formats, sep = ",\\s*")
# Example for multiple columns with different lengths:
new_df <- files %>%
separate_rows(Hist_Map_Types, Interested_Products, Preferred_Formats, sep = ",\\s*")
# Separate 'Hist_Map_Types'
df_HistMap <- files %>%
select(ID = row_number(), Hist_Map_Types) %>%
separate_rows(Hist_Map_Types, sep = ",\\s*")
df_HistMap <- files %>%
mutate(ID = row_number()) %>%
select(ID, Hist_Map_Types) %>%
separate_rows(Hist_Map_Types, sep = ",\\s*")
df_HistMap
View(df_HistMap)
library(dplyr);library(tidyr)
# Separate 'Used_Hist_Maps'
df_Used_Hist_Maps <- files %>%
mutate(ID = row_number()) %>%
select(ID, Used_Hist_Maps) %>%
separate_rows(Used_Hist_Maps, sep = ",\\s*")
# Separate 'Hist_Map_Types'
df_Hist_Map_Types <- files %>%
mutate(ID = row_number()) %>%
select(ID, Hist_Map_Types) %>%
separate_rows(Hist_Map_Types, sep = ",\\s*")
# Separate 'Main_Purpose'
df_Main_Purpose <- files %>%
mutate(ID = row_number()) %>%
select(ID, Main_Purpose) %>%
separate_rows(Main_Purpose, sep = ",\\s*")
# Separate 'Data_Access_Method'
df_Data_Access_Method <- files %>%
mutate(ID = row_number()) %>%
select(ID, Data_Access_Method) %>%
separate_rows(Data_Access_Method, sep = ",\\s*")
# Separate 'Preferred_Formats'
df_Preferred_Formats <- files %>%
mutate(ID = row_number()) %>%
select(ID, Preferred_Formats) %>%
separate_rows(Preferred_Formats, sep = ",\\s*")
# Separate 'Metadata_Standards'
df_Metadata_Standards <- files %>%
mutate(ID = row_number()) %>%
select(ID, Metadata_Standards) %>%
separate_rows(Metadata_Standards, sep = ",\\s*")
# Separate 'Interested_Products'
df_Interested_Products <- files %>%
mutate(ID = row_number()) %>%
select(ID, Interested_Products) %>%
separate_rows(Interested_Products, sep = ",\\s*")
merged_df <- df_Used_Hist_Maps %>%
full_join(df_Hist_Map_Types, by = "ID") %>%
full_join(df_Main_Purpose, by = "ID")
View(df_HistMap)
View(df_Metadata_Standards)
files %>%
mutate(ID = row_number()) %>%
select(ID, Used_Hist_Maps)
files %>%
mutate(ID = row_number()) %>%
select(ID, Used_Hist_Maps) %>%
separate_rows(Used_Hist_Maps, sep = ",\\s*")
files %>%
mutate(ID = row_number()) %>%
select(ID, Hist_Map_Types)
files[,9]
files[,9][3]
strsplit(files[,9][3], ',')
librar(sf)
library(sf)
accdent_data = sf::st_read('data_accident\Accident_data.shp')
accdent_data = sf::st_read('data_accident\\Accident_data.shp')
accdent_data = sf::st_read('data_accident\\Accident_data.shp')
setwd("E:/Clark/Spring2025/Github_Courses/geog-247_Statistics/docs/Labs/Lab06")
accdent_data = sf::st_read('data_accident\\Accident_data.shp')
# split data into 70% training and 30% testing
sample_idx <- sample(nrow(accdent_data), size = 0.7 * nrow(accdent_data))
train <- accdent_data[sample_idx, ]
test <- accdent_data[-sample_idx, ]
table(train$accident)
table(test$accident)
View(train)
# Build a decision tree
tree.acc = tree(accident~Hour + F_SYSTEM + intersect +
NUM_LANES + lane_width+BelowFreez + Fog + Thunder + FrozenPrcec, data = train)
library(sf);library(tree)
# Build a decision tree
tree.acc = tree(accident~Hour + F_SYSTEM + intersect +
NUM_LANES + lane_width+BelowFreez + Fog + Thunder + FrozenPrcec, data = train)
# Build a decision tree
tree.acc = tree(accident~hour + F_SYSTEM + intersect +
NUM_LANES + lane_width+BelowFreez + Fog + Thunder + FrozenPrcec, data = train)
# Build a decision tree
tree.acc = tree(accident~hour + F_SYSTEM + intersect +
NUM_LANES + lane_width+BelowFreez + Fog + Thunder + frozenPrcec, data = train)
# Build a decision tree
tree.acc = tree(accident~hour + F_SYSTEM + intersect +
NUM_LANES + lane_width+BelowFreez + Fog + Thunder + FrozenPrec, data = train)
accdent_data = sf::st_read('data_accident\\Accident_data.shp')
accident_data$accident = as.factor(accident_data$accident)
accdent_data = sf::st_read('data_accident\\Accident_data.shp')
accident_data$accident = as.factor(accdent_data$accident)
accident_data = sf::st_read('data_accident\\Accident_data.shp')
accident_data$accident = as.factor(accident_data$accident)
# split data into 70% training and 30% testing
sample_idx <- sample(nrow(accident_data), size = 0.7 * nrow(accident_data))
train <- accident_data[sample_idx, ]
test <- accident_data[-sample_idx, ]
table(train$accident)
table(test$accident)
tree.acc = tree(accident~hour + F_SYSTEM + intersect +
NUM_LANES + lane_width+BelowFreez + Fog + Thunder + FrozenPrec, data = train)
tree.acc = tree(accident~hour + F_SYSTEM + intersect +NUM_LANES + lane_width+BelowFreez + Fog + Thunder + FrozenPrec, data = train)
# Build a decision tree
newacc = na.omit(train)
# Build a decision tree
tree.acc = tree(accident~hour + F_SYSTEM + intersect +NUM_LANES + lane_width+BelowFreez + Fog + Thunder + FrozenPrec, data = train)
cols_to_factor <- c("accident", "intersect", "BelowFreez", "Fog", "Thunder","FrozenPrec")
# Convert each column to factor
accident_data[cols_to_factor] <- lapply(accident_data[cols_to_factor], as.factor)
accident_data = sf::st_read('data_accident\\Accident_data.shp')
cols_to_factor <- c("accident", "intersect", "BelowFreez", "Fog", "Thunder","FrozenPrec")
# Convert each column to factor
accident_data[cols_to_factor] <- lapply(accident_data[cols_to_factor], as.factor)
str(accident_data)
# Convert each column to factor
accident_data[cols_to_factor] <- lapply(accident_data[,cols_to_factor], as.factor)
accident_data <- within(accident_data, {
for (col in cols_to_factor) {
assign(col, as.factor(get(col)))
}
})
# split data into 70% training and 30% testing
sample_idx <- sample(nrow(accident_data), size = 0.7 * nrow(accident_data))
train <- accident_data[sample_idx, ]
test <- accident_data[-sample_idx, ]
table(train$accident)
table(test$accident)
# Build a decision tree
tree.acc = tree(accident~hour + F_SYSTEM + intersect +NUM_LANES + lane_width+BelowFreez + Fog + Thunder + FrozenPrec, data = train)
plot(tree.acc)
summary(tree.carseats)
summary(tree.acc)
# Build a decision tree
tree.acc = tree(accident~hour + F_SYSTEM + intersect+NACH_LEN_r + NAIN_LEN_r +NUM_LANES + lane_width+BelowFreez + Fog + Thunder + FrozenPrec, data = train)
summary(tree.acc)
plot(tree.acc)
plot(tree.acc)
text(tree.acc ,pretty =0)
cv.carseats =cv.tree(tree.acc,FUN = prune.misclass, K = 3)
names(cv.carseats)
cv.carseats
cv.carseats =cv.tree(tree.acc,FUN = prune.misclass, K = 5)
names(cv.carseats)
cv.carseats
## prune the tree
prune.carseats = prune.misclass(tree.carseats_train, best =6)
plot( prune.carseats)
text( prune.carseats , pretty =0)
## prune the tree
prune.acc = prune.misclass(tree.acc, best =6)
plot( prune.acc)
text( prune.acc , pretty =0)
##
tree.pred = predict(prune.acc, test ,type ="class")
table (tree.pred ,test)
tree.pred
test
##
tree.pred = predict(prune.acc, test$accident ,type ="class")
test$accident
##
tree.pred = predict(prune.acc, test ,type ="class")
table (tree.pred ,test$accident)
