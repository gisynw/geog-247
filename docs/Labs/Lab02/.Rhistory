## check skewness in independent variable and dependent variable
scatterplot(infantMortality~ppgdp, data = UN,xlab = 'Gross Domestic Product per Capita',
ylab = 'Infant Mortality Rate (per 1000 births)',
regLine = list(col = 'darkgreen'),
smooth = list(col.smooth = "red"))
library(MASS);library(car);library(AER);library(carData)
## check skewness in independent variable and dependent variable
car::scatterplot(infantMortality~ppgdp, data = UN,xlab = 'Gross Domestic Product per Capita',
ylab = 'Infant Mortality Rate (per 1000 births)',
regLine = list(col = 'darkgreen'),
smooth = list(col.smooth = "red"))
## estimate lambda for dependent variable
p1 = powerTransform(ppgdp~1, data = UN, family = 'bcPower')
summary(p1)
## estimate lambda for dependent variable
p1 = powerTransform(lm(ppgdp~1, data = UN), family = 'bcPower')
summary(p1)
## estimate
p2 = powerTransform(lm(infantMortality~log(ppgdp), data = UN, family = 'bcPower'))
## estimate
p2 = powerTransform(lm(infantMortality~log(ppgdp), data = UN), family = 'bcPower'))
## estimate
p2 = powerTransform(lm(infantMortality~log(ppgdp), data = UN), family = 'bcPower')
summary(p2)
summary(powerTransform(infantMortality~log(ppgdp), data = UN, family = 'bcPower'))
## estimate lambda for dependent variable
p1 = powerTransform(ppgdp~1, data = UN, family = 'bcPower')
summary(p1)
## estimate
p2 = powerTransform(infantMortality~log(ppgdp), data = UN, family = 'bcPower')
summary(p2)
summary(powerTransform(infantMortality~log(ppgdp), data = UN, family = 'bcPower'))
## examine the data distribution for ppgdp based on three different value of lambda
hist(car::bcPower(UN$ppgdp, lambda=0),breaks = 12,main = 'lambda = 1',xlab = 'x')
## estimate if transformation needed for ppgdp
p1 = powerTransform(ppgdp~1, data = UN, family = 'bcPower')
summary(p1)
## examine the data distribution for ppgdp based on three different value of lambda
par(mfrow = c(1,3))
hist(car::bcPower(UN$ppgdp, lambda=0),breaks = 12,main = 'lambda = 0',xlab = 'x')
hist(car::bcPower(UN$ppgdp, lambda=0.026),breaks = 12,main = 'lambda = 0.026',xlab = 'x')
hist(car::bcPower(UN$ppgdp, lambda=-1),breaks = 12,main = 'lambda = -1',xlab = 'x')
library(MASS);library(car);library(AER);library(carData);library(stats)
boston_model = lm(medv~rm, data = Boston)
summary(boston_model)
confint(boston_model)
##Task 2.b
## check skewness in independent variable and dependent variable
car::scatterplot(infantMortality~ppgdp, data = new_un,xlab = 'Gross Domestic Product per Capita',
ylab = 'Infant Mortality Rate (per 1000 births)',
regLine = list(col = 'darkgreen'),
smooth = list(col.smooth = "red"))
## Task 2.a
data('UN')
par(mfrow = c(1,1))
new_un = na.omit(UN)
##Task 2.b
## check skewness in independent variable and dependent variable
car::scatterplot(infantMortality~ppgdp, data = new_un,xlab = 'Gross Domestic Product per Capita',
ylab = 'Infant Mortality Rate (per 1000 births)',
regLine = list(col = 'darkgreen'),
smooth = list(col.smooth = "red"))
testTransform(p1, lambda = 0)
## Task 2.b
## estimate if transformation needed for ppgdp
p1 = powerTransform(ppgdp~1, data = new_un, family = 'bcPower')
summary(p1)
testTransform(p1, lambda = 0)
testTransform(p1, lambda = 0.026)
testTransform(p1, lambda = -1)
## Task 2.f
log_lm_model = lm(log(infantMortality)~log(ppgdp), data = new_un)
summary(log_lm_model)
## Task 2.f
car::scatterplot(log(infantMortality)~log(ppgdp), data = new_un,xlab = 'Gross Domestic Product per Capita',
ylab = 'Infant Mortality Rate (per 1000 births)',
regLine = list(col = 'darkgreen'),
smooth = list(col.smooth = "red"))
boston_model = lm(medv~rm, data = Boston)
summary(lm(new_un$infantMortality ~ new_un$ppgdp))
plot(log_lm_model$fitted.values~log_lm_model$residuals)
plot(lm_model$fitted.values~lm_model$residuals)
lm_model = lm(infantMortality~ppgdp, data = new_un)
plot(lm_model$fitted.values~lm_model$residuals)
plot(lm_model$fitted.values~lm_model$residuals)
plot(log_lm_model$fitted.values~log_lm_model$residuals)
plot(log_lm_model$residuals~log_lm_model$fitted.values)
lm_model = lm(infantMortality~ppgdp, data = new_un)
plot(lm_model$residuals~lm_model$fitted.values)
plot(log_lm_model$residuals~log_lm_model$fitted.values)
lm_model = lm(infantMortality~ppgdp, data = new_un)
plot(lm_model$residuals~lm_model$fitted.values)
##Task 2.b
## check skewness in independent variable and dependent variable
car::scatterplot(infantMortality~ppgdp, data = new_un,xlab = 'Gross Domestic Product per Capita',
ylab = 'Infant Mortality Rate (per 1000 births)',
regLine = list(col = 'darkgreen'),
smooth = list(col.smooth = "red"))
## Task 2.c
## estimate if transformation needed for ppgdp
p1 = powerTransform(ppgdp~1, data = new_un, family = 'bcPower')
summary(p1)
lambda_0 = car::bcPower(new_un$ppgdp, lambda=1)
lambda_optimal = car::bcPower(new_un$ppgdp, lambda=0.026)
lambda_negative = car::bcPower(new_un$ppgdp, lambda=-1)
hist(lambda_0,breaks = 12,main = 'lambda = 1',xlab = 'x')
hist(lambda_optimal,breaks = 12,main = 'lambda = 0.026',xlab = 'x')
hist(lambda_negative,breaks = 12,main = 'lambda = -1',xlab = 'x')
par(mfrow = c(1,3))
hist(lambda_0,breaks = 12,main = 'lambda = 1',xlab = 'x')
hist(lambda_optimal,breaks = 12,main = 'lambda = 0.026',xlab = 'x')
hist(lambda_negative,breaks = 12,main = 'lambda = -1',xlab = 'x')
shapiro.test(lambda_0)
shapiro.test(lambda_optimal)
shapiro.test(lambda_negative)
##Task 1.b
summary(boston_model)
##Task 1.c
confint(boston_model)
lambda_0 = car::bcPower(new_un$ppgdp, lambda=1)
library(MASS);library(car);library(AER);library(carData);library(stats)
##Task 1.a
data('Boston')
boston_model = lm(medv~rm, data = Boston)
##Task 1.b
summary(boston_model)
##Task 1.c
confint(boston_model)
## Task 2.a
data('UN')
par(mfrow = c(1,1))
new_un = na.omit(UN)
##Task 2.b
## check skewness in independent variable and dependent variable
car::scatterplot(infantMortality~ppgdp, data = new_un,xlab = 'Gross Domestic Product per Capita',
ylab = 'Infant Mortality Rate (per 1000 births)',
regLine = list(col = 'darkgreen'),
smooth = list(col.smooth = "red"))
## Task 2.c
## estimate if transformation needed for ppgdp
p1 = powerTransform(ppgdp~1, data = new_un, family = 'bcPower')
summary(p1)
##Task 2.d
## examine the data distribution for ppgdp based on three different value of lambda
lambda_0 = car::bcPower(new_un$ppgdp, lambda=1)
lambda_optimal = car::bcPower(new_un$ppgdp, lambda=0.019)
lambda_negative = car::bcPower(new_un$ppgdp, lambda=-1)
par(mfrow = c(1,3))
hist(lambda_0,breaks = 12,main = 'lambda = 1',xlab = 'x')
hist(lambda_optimal,breaks = 12,main = 'lambda = 0.026',xlab = 'x')
hist(lambda_negative,breaks = 12,main = 'lambda = -1',xlab = 'x')
shapiro.test(lambda_0)
shapiro.test(lambda_optimal)
shapiro.test(lambda_negative)
## Task 2.e
## Estimate if transformation needed for infantMortality
p2 = powerTransform(infantMortality~log(ppgdp), data = new_un, family = 'bcPower')
summary(p2)
## Task 2.f
car::scatterplot(log(infantMortality)~log(ppgdp), data = new_un,xlab = 'Gross Domestic Product per Capita',
ylab = 'Infant Mortality Rate (per 1000 births)',
regLine = list(col = 'darkgreen'),
smooth = list(col.smooth = "red"))
## Task 2.g
log_lm_model = lm(log(infantMortality)~log(ppgdp), data = new_un)
summary(log_lm_model)
plot(log_lm_model$residuals~log_lm_model$fitted.values)
lm_model = lm(infantMortality~ppgdp, data = new_un)
plot(lm_model$residuals~lm_model$fitted.values)
lambda_0 = car::bcPower(new_un$ppgdp, lambda=1)
lambda_optimal = car::bcPower(new_un$ppgdp, lambda=0.019)
lambda_negative = car::bcPower(new_un$ppgdp, lambda=-1)
par(mfrow = c(1,3))
hist(lambda_0,breaks = 12,main = 'lambda = 1',xlab = 'x')
hist(lambda_optimal,breaks = 12,main = 'lambda = 0.026',xlab = 'x')
hist(lambda_negative,breaks = 12,main = 'lambda = -1',xlab = 'x')
lambda_0 = car::bcPower(new_un$ppgdp, lambda=1)
lambda_optimal = car::bcPower(new_un$ppgdp, lambda=0.019)
lambda_negative = car::bcPower(new_un$ppgdp, lambda=-1)
par(mfrow = c(1,3))
hist(lambda_0,breaks = 12,main = 'lambda = 1',xlab = 'x')
hist(lambda_optimal,breaks = 12,main = 'lambda = 0.019',xlab = 'x')
hist(lambda_negative,breaks = 12,main = 'lambda = -1',xlab = 'x')
shapiro.test(lambda_0)
shapiro.test(lambda_optimal)
shapiro.test(lambda_negative)
shapiro.test(lambda_1)
shapiro.test(lambda_optimal)
shapiro.test(lambda_negative)
lambda_1 = car::bcPower(new_un$ppgdp, lambda=1)
lambda_optimal = car::bcPower(new_un$ppgdp, lambda=0.019)
lambda_negative = car::bcPower(new_un$ppgdp, lambda=-1)
par(mfrow = c(1,3))
hist(lambda_1,breaks = 12,main = 'lambda = 1',xlab = 'x')
hist(lambda_optimal,breaks = 12,main = 'lambda = 0.019',xlab = 'x')
hist(lambda_negative,breaks = 12,main = 'lambda = -1',xlab = 'x')
shapiro.test(lambda_1)
shapiro.test(lambda_optimal)
shapiro.test(lambda_negative)
## Task 2.e
## Estimate if transformation needed for infantMortality
p2 = powerTransform(infantMortality~log(ppgdp), data = new_un, family = 'bcPower')
summary(p2)
## Task 2.g
log_lm_model = lm(log(infantMortality)~log(ppgdp), data = new_un)
summary(log_lm_model)
plot(log_lm_model$residuals~log_lm_model$fitted.values)
install.packages("sp")
library(sp)
install.packages("E:/Clark/Spring2025/Github_Courses/geog-247_Statistics/docs/Labs/Lab04/TexMix_0.5.3.tar.gz", repos = NULL, type = "source")
install.packages("E:/Clark/Spring2025/Github_Courses/geog-247_Statistics/docs/Labs/Lab04/maptools_1.1-8.tar.gz", repos = NULL, type = "source")
