library(carData);library(car);library(regclass);library(openintro);library(MASS)
evals = read.csv('evals.csv')
getwd()
setwd('D:\\Teaching_Clark\\GitRepo\\Spring2025\\geog-247-statistics\\docs\\Labs\\Lab03')
evals = read.csv('evals.csv')
best_subset <- regsubsets(m_full, data = evals, nbest = 1, nvmax = 13)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
#b
summary(m_full)
#c
#provide interpretation for the coefficient associated with the ethnicity variable
#d
# d best subset model
best_subset <- regsubsets(m_full, data = evals, nbest = 1, nvmax = 13)
best_subset01 <- regsubsets(score ~ ., data = evals, nbest = 1, nvmax = 13)
best_subset01 <- regsubsets(score ~ ., data = evals, nbest = 1)
best_subset02 <- regsubsets(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals, nbest = 1, nvmax = 13)
summary(best_subset02)
best_subset01 <- regsubsets(score ~ ., data = evals, nbest = 1)
best_subset01 <- regsubsets(score ~ ., data = evals, nbest = 1,nvmax = 24)
best_subset01 <- regsubsets(score ~ ., data = evals, nbest = 1,nvmax = 23)
summary_best <- summary(best_subset)
best_subset <- regsubsets(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals, nbest = 1, nvmax = 13)
summary_best <- summary(best_subset)
best_model_index <- which.min(summary_best$cp)
best_variables <- names(which(summary_best$which[best_model_index,]))
best_variables
cat("Best model has", best_model_index, "predictors with lowest C_P:", max(summary_best$cp), "\n")
backward_model <- step(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals,direction = "backward")
summary_backward <- summary(backward_model)
backward_model <- step(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals,direction = "backward")
full_model = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
backward_model <- step(full_model,direction = "backward")
best_subset <- regsubsets(full_model, nbest = 1, nvmax = 13)
summary_backward <- summary(backward_model)
full_model = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
backward_model <- step(full_model,direction = "backward")
summary_backward <- summary(backward_model)
summary(forward_model)
best_model_index <- which.min(forward_model$cp)
summary_backward <- summary(backward_model)
best_model_index <- which.min(summary_backward$cp)
best_variables <- names(which(summary_backward$which[best_model_index,]))
best_model_index
summary_backward$cp
summary_backward
summary_backward
best_variables <- names(which(summary_best$which[best_model_index,]))
cat("Best model has", best_model_index, "predictors with lowest C_P:", max(summary_best$cp), "\n")
best_subset <- regsubsets(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals, nbest = 1, nvmax = 13)
summary_best <- summary(best_subset)
best_model_index <- which.min(summary_best$cp)
best_variables <- names(which(summary_best$which[best_model_index,]))
cat("Best model has", best_model_index, "predictors with lowest C_P:", max(summary_best$cp), "\n")
summary_best
best_variables
summary_best <- summary(best_subset)
best_model_index <- which.min(summary_best$cp)
best_variables <- names(which(summary_best$which[best_model_index,]))
cat("Best model has", best_model_index, "predictors with lowest C_P:", max(summary_best$cp), "\n", 'the variables are:', best_variables)
best_variables
summary_best <- summary(best_subset)
best_model_index <- which.min(summary_best$cp)
best_variables <- names(which(summary_best$which[best_model_index,]))
cat("Best model has", best_model_index, "predictors with lowest C_P:", max(summary_best$cp), "\n")
best_variables
summary_backward
best_variables
full_model = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
regfit_fwd = regsubsets(full_model, nvmax = 13, method = 'forward')
regfit_fwd = regsubsets(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals, nvmax = 13, method = 'forward')
summary_regfit_fwd = summary(regfit_fwd)
summary_regfit_fwd
forward_model  = regsubsets(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals, nvmax = 13, method = 'forward')
summary_forward <- summary(forward_model)
best_model_index <- which.min(summary_forward$cp)
best_variables <- names(which(summary_forward$which[best_model_index,]))
cat("Best model has", best_model_index, "predictors with lowest C_P:", max(summary_best$cp), "\n")
best_variables
summary_forward <- summary(forward_model)
best_model_index <- which.min(summary_forward$cp)
best_variables <- names(which(summary_forward$which[best_model_index,]))
cat("Best model has", best_model_index, "predictors with lowest C_P:", max(summary_forward$cp), "\n")
best_variables
forward_model
summary_forward <- summary(forward_model)
best_model_index <- which.min(summary_forward$cp)
best_variables <- names(which(summary_forward$which[best_model_index,]))
cat("Best model has", best_model_index, "predictors with lowest C_P:", max(summary_forward$cp), "\n")
best_variables
final_model = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval+  cls_credits + bty_avg+ pic_outfit + pic_color, data = evals)
final_model = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval+  cls_credits + bty_avg+ pic_outfit + pic_color, data = evals)
summary(final_model)
final_model = lm(score ~  ethnicity + gender + language + age + cls_perc_eval+  cls_credits + bty_avg+ pic_outfit + pic_color, data = evals)
summary(final_model)
logistic_model_03<- glm(lfp ~ k5 + k618 + age + wc, family=binomial(logit), data=Mroz)
summary(logistic_model_03)
logistic_model_03<- glm(lfp ~ k5 +wc, family=binomial(logit), data=Mroz)
summary(logistic_model_03)
s1 = (0.285 - 0.963 *5 + 0) / (1+exp(0.285 - 0.963 *5 + 0))
s2 = (0.285 - 0.963 *2 + 0.818*1) / (1+exp(0.285 - 0.963 *5 + 0.818*1))
s1
s2
s1 = exp(0.285 - 0.963 *5 + 0) / (1+exp(0.285 - 0.963 *5 + 0))
s2 = exp(0.285 - 0.963 *2 + 0.818*1) / (1+exp(0.285 - 0.963 *5 + 0.818*1))
s1
s2
summary_log01 = summary(logistic_model1)
logistic_model1<- glm(lfp ~ k5 + k618 + age + wc + hc + lwg + inc, family=binomial(logit), data=Mroz)
summary_log01 = summary(logistic_model1)
summary_log01$family
summary_log01$df.residual
data('Mroz')
force(Mroz)
logistic_model1<- glm(lfp ~ k5 + k618 + age + wc + hc + lwg + inc, family=binomial(logit), data=Mroz)
summary_log01 = summary(logistic_model1)
summary_log01$df.residual
confint(summary_log01, level = 0.95)
confint(logistic_model1, level = 0.95)
logistic_model2<- glm(lfp ~ k5 +  age + wc +  lwg + inc, family=binomial(logit), data=Mroz)
anova(logistic_model1, logistic_model2, test = "LRT")
anova(logistic_model1, logistic_model2)
library(sf)
path = 'D:\\teaching_Clark\\GitRepo\\Spring2025\\geog-247-statistics\\docs\\Labs\\Lab05'
setwd(path)
list.files(path)
##Task 1.a
df = st_read('data_accident\\Accident_data.shp')
df$accident = as.factor(df$accident)
df$F_SYSTEM = as.factor(df$F_SYSTEM)
logistic_acc = glm(accident~hour+F_SYSTEM+intersect+NUM_LANES+lane_width+BelowFreez+Fog+Thunder+FrozenPrec,family = binomial(logit),data = df)
logistic_acc02 = glm(accident~hour+F_SYSTEM+intersect+NUM_LANES+Fog,family = binomial(logit),data = df)
summary(logistic_acc02)
anova(logistic_acc, logistic_acc02)
## Likelihood ratio test
lkh = logLik(logistic_acc)
lh = logLik(logistic_acc02)
LR = -2 * (lkh - lh)
pchisq(LR[1], df = 2, lower.tail = F)
pchisq(LR[1], df = 2, lower.tail = F)
anova(logistic_model1, logistic_model2, test = "LRT")
anova(logistic_acc, logistic_acc02)
pchisq(LR[1], df = 4, lower.tail = F)
LR
pchisq(LR[1], df = 4, lower.tail = F)
anova(logistic_model1, logistic_model2, test = "LRT")
## Likelihood ratio test
lkh = logLik(logistic_model2)
lh = logLik(logistic_model1)
LR = -2 * (lkh - lh)
LR
pchisq(LR[1], df = 2, lower.tail = F)
LR
lkh = logLik(logistic_acc)
lh = logLik(logistic_acc02)
LR = -2 * (lkh - lh)
LR
logistic_acc02 = glm(accident~hour+F_SYSTEM+intersect+NUM_LANES+Fog,family = binomial(logit),data = df)
summary(logistic_acc02)
anova(logistic_acc, logistic_acc02)
lkh = logLik(logistic_acc02)
lh = logLik(logistic_acc)
LR = -2 * (lkh - lh)
pchisq(LR[1], df = 4, lower.tail = F)
anova(logistic_model1, logistic_model2, test = "LRT")
LR
LR[1]
library(effects)
plot(allEffects(logistic_model2), type="response", ylim=c(0,1), ask=FALSE)
low_prb <- effect("NUM_LANES", logistic_acc02, given.values = c(hour = 3, F_SYSTEM = 6, intersectyes = 0))
logistic_acc02 = glm(accident~hour+F_SYSTEM+intersect+NUM_LANES+Fog,family = binomial(logit),data = df)
summary(logistic_acc02)
anova(logistic_acc, logistic_acc02)
## Likelihood ratio test
lkh = logLik(logistic_acc02)
lh = logLik(logistic_acc)
LR = -2 * (lkh - lh)
pchisq(LR[1], df = 4, lower.tail = F)
## Task 4.a
par(mfrow = c(1, 1))
library(effects)
# Compute effect for low probability scenario
low_prb <- effect("NUM_LANES", logistic_acc02, given.values = c(hour = 3, F_SYSTEM = 6, intersectyes = 0))
logistic_acc02
df = st_read('data_accident\\Accident_data.shp')
##Task 1.b
df$geometry
##Task 1.c
df$accident = as.factor(df$accident)
low_prb <- effect("NUM_LANES", logistic_acc02, given.values = c(hour = 3, F_SYSTEM = 6, intersectyes = 0))
logistic_acc02 = glm(accident~hour+F_SYSTEM+intersect+NUM_LANES+Fog,family = binomial(logit),data = df)
summary(logistic_acc02)
anova(logistic_acc, logistic_acc02)
low_prb <- effect("NUM_LANES", logistic_acc02, given.values = c(hour = 3, F_SYSTEM = 6, intersectyes = 0))
# Compute effect for high probability scenario
high_prb <- effect("NUM_LANES", logistic_acc02, given.values = c(hour = 19, F_SYSTEM = 2, intersectyes = 1))
low_data <- as.data.frame(low_prb)
high_data <- as.data.frame(high_prb)
low_data
logistic_model2<- glm(lfp ~ k5 +  age + wc +  lwg + inc, family=binomial(logit), data=Mroz)
summary(logistic_model2)
low_prb <- effect("k5", logistic_acc02, given.values = c(age = 40, wcyes = 0, inc = 20))
low_prb <- effect("k5", logistic_model2, given.values = c(age = 40, wcyes = 0, inc = 20))
# Compute effect for high probability scenario
high_prb <- effect("k5", logistic_model2, given.values = c(age = 25, wcyes = 1, inc = 5))
# Extract data
low_data <- as.data.frame(low_prb)
high_data <- as.data.frame(high_prb)
# Plot the low probability case first
# Plot the low probability case first
plot(low_data$k5, low_data$fit, type = "l", col = "blue", lwd = 2, ylim = c(0, 1),
ylab = expression(Pr(Y[i] == "labor-force participation probability")), xlab = "number of children 5 years old or younger",
main = "labor-force participation probability vs k5")
# Add shaded confidence intervals for low probability
polygon(c(low_data$k5, rev(low_data$NUM_LANES)),
c(low_data$lower, rev(low_data$upper)), col = rgb(0, 0, 1, 0.2), border = NA)
plot(low_data$k5, low_data$fit, type = "l", col = "blue", lwd = 2, ylim = c(0, 1),
ylab = expression(Pr(Y[i] == "labor-force participation probability")), xlab = "number of children 5 years old or younger",
main = "labor-force participation probability vs k5")
# Add shaded confidence intervals for low probability
polygon(c(low_data$k5, rev(low_data$NUM_LANES)),
c(low_data$lower, rev(low_data$upper)), col = rgb(0, 0, 1, 0.2), border = NA)
# Add shaded confidence intervals for low probability
polygon(c(low_data$k5, rev(low_data$k5)),
c(low_data$lower, rev(low_data$upper)), col = rgb(0, 0, 1, 0.2), border = NA)
# Add high probability scenario
lines(high_data$k5, high_data$fit, col = "red", lwd = 2)
# Add shaded confidence intervals for high probability
polygon(c(high_data$k5, rev(high_data$k5)),
c(high_data$lower, rev(high_data$upper)), col = rgb(1, 0, 0, 0.2), border = NA)
# Add legend
legend("bottomright", legend = c("Low Probability", "High Probability"), col = c("blue", "red"), lwd = 2)
plot(low_data$k5, low_data$fit, type = "l", col = "blue", lwd = 2, ylim = c(0, 1),
ylab = expression(Pr(Y[i] == "labor-force participation probability")), xlab = "number of children 5 years old or younger",
main = "labor-force participation probability vs k5")
# Add shaded confidence intervals for low probability
polygon(c(low_data$k5, rev(low_data$k5)),
c(low_data$lower, rev(low_data$upper)), col = rgb(0, 0, 1, 0.2), border = NA)
# Add high probability scenario
lines(high_data$k5, high_data$fit, col = "red", lwd = 2)
# Add shaded confidence intervals for high probability
polygon(c(high_data$k5, rev(high_data$k5)),
c(high_data$lower, rev(high_data$upper)), col = rgb(1, 0, 0, 0.2), border = NA)
# Add legend
legend("bottomright", legend = c("Low Probability", "High Probability"), col = c("blue", "red"), lwd = 2)
plot(low_data$k5, low_data$fit, type = "l", col = "blue", lwd = 2, ylim = c(0, 1),
ylab = expression(Pr(Y[i] == "labor-force participation probability")), xlab = "number of children 5 years old or younger",
main = "labor-force participation probability vs k5")
# Add shaded confidence intervals for low probability
polygon(c(low_data$k5, rev(low_data$k5)),
c(low_data$lower, rev(low_data$upper)), col = rgb(0, 0, 1, 0.2), border = NA)
# Add high probability scenario
lines(high_data$k5, high_data$fit, col = "red", lwd = 2)
# Add shaded confidence intervals for high probability
polygon(c(high_data$k5, rev(high_data$k5)),
c(high_data$lower, rev(high_data$upper)), col = rgb(1, 0, 0, 0.2), border = NA)
# Add legend
legend("topright", legend = c("Low Probability", "High Probability"), col = c("blue", "red"), lwd = 2)
