# create a grid from the x and y values (min to max) and predict values for every point
# this will become the regression plane
grid.lines = 20
x.pred <- seq(min(x1), max(x1), length.out = grid.lines)
y.pred <- seq(min(x2), max(x2), length.out = grid.lines)
xy <- expand.grid( x1 = x.pred, x2 = y.pred)
z.pred <- matrix(predict(model, newdata = xy),
nrow = grid.lines, ncol = grid.lines)
# create the fitted points for droplines to the surface
fitpoints <- predict(model)
# scatter plot with regression plane
scatter3D(x1, x2, y, pch = 19, cex = 1,colvar = NULL, col="red",
theta = 30, phi = 5, bty="b",
xlab = "x1", ylab = "x2", zlab = "y",
surf = list(x = x.pred, y = y.pred, z = z.pred,
facets = TRUE, fit = fitpoints,
col=ramp.col(col = c("dodgerblue3","seagreen2"),
n = 300, alpha=0.9),
border="black"), main = "3D Regression")
?scatter3D
??scatter3D
library(scatterplot3d)
version
R.version.string
library(scatterplot3d)
# Step 1: Generate synthetic data
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x1 <- runif(n, 0, 10)  # Random values for x1
x2 <- runif(n, 0, 10)  # Random values for x2
y <- 5 + 2 * x1 + 3 * x2 + rnorm(n, mean = 0, sd = 5)  # Linear relationship with noise
# Step 2: Create a data frame
data <- data.frame(x1 = x1, x2 = x2, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x1 + x2)
summary(model)
# create a grid from the x and y values (min to max) and predict values for every point
# this will become the regression plane
grid.lines = 20
x.pred <- seq(min(x1), max(x1), length.out = grid.lines)
y.pred <- seq(min(x2), max(x2), length.out = grid.lines)
xy <- expand.grid( x1 = x.pred, x2 = y.pred)
z.pred <- matrix(predict(model, newdata = xy),
nrow = grid.lines, ncol = grid.lines)
# create the fitted points for droplines to the surface
fitpoints <- predict(model)
# scatter plot with regression plane
scatter3D(x1, x2, y, pch = 19, cex = 1,colvar = NULL, col="red",
theta = 30, phi = 5, bty="b",
xlab = "x1", ylab = "x2", zlab = "y",
surf = list(x = x.pred, y = y.pred, z = z.pred,
facets = TRUE, fit = fitpoints,
col=ramp.col(col = c("dodgerblue3","seagreen2"),
n = 300, alpha=0.9),
border="black"), main = "3D Regression")
library(plot3D)
# Step 1: Generate synthetic data
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x1 <- runif(n, 0, 10)  # Random values for x1
x2 <- runif(n, 0, 10)  # Random values for x2
y <- 5 + 2 * x1 + 3 * x2 + rnorm(n, mean = 0, sd = 5)  # Linear relationship with noise
# Step 2: Create a data frame
data <- data.frame(x1 = x1, x2 = x2, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x1 + x2)
summary(model)
# create a grid from the x and y values (min to max) and predict values for every point
# this will become the regression plane
grid.lines = 20
x.pred <- seq(min(x1), max(x1), length.out = grid.lines)
y.pred <- seq(min(x2), max(x2), length.out = grid.lines)
xy <- expand.grid( x1 = x.pred, x2 = y.pred)
z.pred <- matrix(predict(model, newdata = xy),
nrow = grid.lines, ncol = grid.lines)
# create the fitted points for droplines to the surface
fitpoints <- predict(model)
# scatter plot with regression plane
scatter3D(x1, x2, y, pch = 19, cex = 1,colvar = NULL, col="red",
theta = 30, phi = 5, bty="b",
xlab = "x1", ylab = "x2", zlab = "y",
surf = list(x = x.pred, y = y.pred, z = z.pred,
facets = TRUE, fit = fitpoints,
col=ramp.col(col = c("dodgerblue3","seagreen2"),
n = 300, alpha=0.9),
border="black"), main = "3D Regression")
z.pred
scatter3D(x1, x2, y, pch = 19, cex = 1,colvar = NULL, col="purple",
theta = 30, phi = 5, bty="b",
xlab = "x1", ylab = "x2", zlab = "y",
surf = list(x = x.pred, y = y.pred, z = z.pred,
facets = TRUE, fit = fitpoints,
col=ramp.col(col = c("dodgerblue3","seagreen2"),
n = 300, alpha=0.9),
border="black"), main = "3D Regression")
scatter3D(x1, x2, y, pch = 19, cex = 1,colvar = NULL, col="red",
theta = 30, phi = 5, bty="b",
xlab = "x1", ylab = "x2", zlab = "y",
surf = list(x = x.pred, y = y.pred, z = z.pred,
facets = TRUE, fit = fitpoints,
col=ramp.col(col = c("dodgerblue3","seagreen2"),
n = 300, alpha=0.9),
border="black"), main = "3D Regression")
seq(min(x1), max(x1), length.out = grid.lines)
View(xy)
View(z.pred)
# Step 1: Generate serial data with more noise
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x <- seq(1, n)  # Serial data (x variable)
y <- 3 * x + rnorm(n, mean = 0, sd = 50)  # More noise added to y
# Step 2: Create a data frame
data <- data.frame(x = x, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x, data = data)
r_squared <- summary(model)$r.squared
# Step 4: Plot the regression line and confidence interval
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 10, y = max(data$y) - 50, label = paste("R² = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)")
#1.
if (!require('ggplot2')) install.packages('ggplot2')
#2.
# manually download package
#
#Download package that was removed from CRAN repository
#e.g., TexMix, rgdal
# Step 1: Generate serial data with more noise
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x <- seq(1, n)  # Serial data (x variable)
y <- 3 * x + rnorm(n, mean = 0, sd = 50)  # More noise added to y
# Step 2: Create a data frame
data <- data.frame(x = x, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x, data = data)
r_squared <- summary(model)$r.squared
# Step 4: Plot the regression line and confidence interval
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 10, y = max(data$y) - 50, label = paste("R² = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)")
#1.
if (!require('ggplot2')) install.packages('ggplot2')
#2.
# manually download package
#
#Download package that was removed from CRAN repository
#e.g., TexMix, rgdal
# Load necessary library
library("ISLR")
data('College')
??scatter3D
library(plot3D)
# Step 1: Generate synthetic data
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x1 <- runif(n, 0, 10)  # Random values for x1
x2 <- runif(n, 0, 10)  # Random values for x2
y <- 5 + 2 * x1 + 3 * x2 + rnorm(n, mean = 0, sd = 5)  # Linear relationship with noise
# Step 2: Create a data frame
data <- data.frame(x1 = x1, x2 = x2, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x1 + x2)
summary(model)
# create a grid from the x and y values (min to max) and predict values for every point
# this will become the regression plane
grid.lines = 20
x.pred <- seq(min(x1), max(x1), length.out = grid.lines)
y.pred <- seq(min(x2), max(x2), length.out = grid.lines)
xy <- expand.grid( x1 = x.pred, x2 = y.pred)
z.pred <- matrix(predict(model, newdata = xy),
nrow = grid.lines, ncol = grid.lines)
# create the fitted points for droplines to the surface
fitpoints <- predict(model)
# scatter plot with regression plane
scatter3D(x1, x2, y, pch = 19, cex = 1,colvar = NULL, col="red",
theta = 30, phi = 5, bty="b",
xlab = "x1", ylab = "x2", zlab = "y",
surf = list(x = x.pred, y = y.pred, z = z.pred,
facets = TRUE, fit = fitpoints,
col=ramp.col(col = c("dodgerblue3","seagreen2"),
n = 300, alpha=0.9),
border="black"), main = "3D Regression")
# Step 1: Generate serial data with more noise
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x <- seq(1, n)  # Serial data (x variable)
y <- 3 * x + rnorm(n, mean = 0, sd = 50)  # More noise added to y
# Step 2: Create a data frame
data <- data.frame(x = x, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x, data = data)
r_squared <- summary(model)$r.squared
# Step 4: Plot the regression line and confidence interval
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 10, y = max(data$y) - 50, label = paste("R² = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)")
# Step 1: Generate serial data with more noise
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x <- seq(1, n)  # Serial data (x variable)
y <- 3 * x + rnorm(n, mean = 0, sd = 50)  # More noise added to y
# Step 2: Create a data frame
data <- data.frame(x = x, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x, data = data)
r_squared <- summary(model)$r.squared
# Step 4: Plot the regression line and confidence interval
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 10, y = max(data$y) - 50, label = paste("R² = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)")
+ theme_minimal()
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 10, y = max(data$y) - 50, label = paste("R² = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)") + theme_minimal()
# Step 1: Generate serial data with more noise
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x <- seq(1, n)  # Serial data (x variable)
y <- 3 * x + rnorm(n, mean = 0, sd = 50)  # More noise added to y
# Step 2: Create a data frame
data <- data.frame(x = x, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x, data = data)
r_squared <- summary(model)$r.squared
# Step 4: Plot the regression line and confidence interval
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 10, y = max(data$y) - 50, label = paste("R² = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)") + theme_minimal()
# Step 4: Plot the regression line and confidence interval
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 10, y = max(data$y) - 50, label = paste("R² = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)") +
theme_minimal()
# Step 1: Generate serial data with more noise
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x <- seq(1, n)  # Serial data (x variable)
y <- 3 * x + rnorm(n, mean = 0, sd = 50)  # More noise added to y
# Step 2: Create a data frame
data <- data.frame(x = x, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x, data = data)
r_squared <- summary(model)$r.squared
# Step 4: Plot the regression line and confidence interval
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 10, y = max(data$y) - 50, label = paste("R² = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)") +
theme_minimal()
# Step 4: Plot the regression line and confidence interval
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 10, y = max(data$y) - 50, label = paste("R² = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)") +
theme_minimal()
# Step 1: Generate serial data with more noise
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x <- seq(1, n)  # Serial data (x variable)
y <- 3 * x + rnorm(n, mean = 0, sd = 50)  # More noise added to y
# Step 2: Create a data frame
data <- data.frame(x = x, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x, data = data)
r_squared <- summary(model)$r.squared
# Step 4: Plot the regression line and confidence interval
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 10, y = max(data$y) - 50, label = paste("R² = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)") +
theme_minimal()
## Multiple regresison
# Load necessary library
library("ISLR")
# Step 1: Generate serial data with more noise
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x <- seq(1, n)  # Serial data (x variable)
y <- 3 * x + rnorm(n, mean = 0, sd = 50)  # More noise added to y
# Step 2: Create a data frame
data <- data.frame(x = x, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x, data = data)
r_squared <- summary(model)$r.squared
# Step 4: Plot the regression line and confidence interval
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 10, y = max(data$y) - 50, label = paste("R² = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)") +
theme_minimal()
max(data$y)
data
data$y
max(data$y)
max(data$y) - 50
# Step 1: Generate serial data with more noise
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x <- seq(1, n)  # Serial data (x variable)
y <- 3 * x + rnorm(n, mean = 0, sd = 50)  # More noise added to y
# Step 2: Create a data frame
data <- data.frame(x = x, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x, data = data)
r_squared <- summary(model)$r.squared
# Step 4: Plot the regression line and confidence interval
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 10, y = max(data$y) - 50, label = paste("R² = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)") +
theme_minimal()
data
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 10, y = max(data$y) - 50, label = paste("R-square = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)") +
theme_minimal()
# Step 4: Plot the regression line and confidence interval
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 15, y = max(data$y) - 50, label = paste("R-square = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)") +
theme_minimal()
## clean all objects in environment
rm(list = ls())
## download package
#1.
if (!require('ggplot2')) install.packages('ggplot2')
#2.
# manually download package
#
#Download package that was removed from CRAN repository
#e.g., TexMix, rgdal
install.packages('TexMix')
# Step 1: Generate serial data with more noise
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x <- seq(1, n)  # Serial data (x variable)
y <- 3 * x + rnorm(n, mean = 0, sd = 50)  # More noise added to y
# Step 2: Create a data frame
data <- data.frame(x = x, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x, data = data)
r_squared <- summary(model)$r.squared
# Step 4: Plot the regression line and confidence interval
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 15, y = max(data$y) - 50, label = paste("R-squared = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)") +
theme_minimal()
## Multiple regresison
# Load necessary library
library("ISLR")
data('College')
??scatter3D
library(plot3D)
# Step 1: Generate synthetic data
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x1 <- runif(n, 0, 10)  # Random values for x1
x2 <- runif(n, 0, 10)  # Random values for x2
y <- 5 + 2 * x1 + 3 * x2 + rnorm(n, mean = 0, sd = 5)  # Linear relationship with noise
# Step 2: Create a data frame
data <- data.frame(x1 = x1, x2 = x2, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x1 + x2)
summary(model)
# create a grid from the x and y values (min to max) and predict values for every point
# this will become the regression plane
grid.lines = 20
x.pred <- seq(min(x1), max(x1), length.out = grid.lines)
y.pred <- seq(min(x2), max(x2), length.out = grid.lines)
xy <- expand.grid( x1 = x.pred, x2 = y.pred)
z.pred <- matrix(predict(model, newdata = xy),
nrow = grid.lines, ncol = grid.lines)
# create the fitted points for droplines to the surface
fitpoints <- predict(model)
# scatter plot with regression plane
scatter3D(x1, x2, y, pch = 19, cex = 1,colvar = NULL, col="red",
theta = 30, phi = 5, bty="b",
xlab = "x1", ylab = "x2", zlab = "y",
surf = list(x = x.pred, y = y.pred, z = z.pred,
facets = TRUE, fit = fitpoints,
col=ramp.col(col = c("dodgerblue3","seagreen2"),
n = 300, alpha=0.9),
border="black"), main = "3D Regression")
# Step 1: Generate serial data with more noise
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x <- seq(1, n)  # Serial data (x variable)
y <- 3 * x + rnorm(n, mean = 0, sd = 50)  # More noise added to y
# Step 2: Create a data frame
data <- data.frame(x = x, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x, data = data)
r_squared <- summary(model)$r.squared
# Step 4: Plot the regression line and confidence interval
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 10, y = max(data$y) - 50, label = paste("R-squared = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)") +
theme_minimal()
# Step 1: Generate serial data with more noise
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x <- seq(1, n)  # Serial data (x variable)
y <- 3 * x + rnorm(n, mean = 0, sd = 50)  # More noise added to y
# Step 2: Create a data frame
data <- data.frame(x = x, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x, data = data)
r_squared <- summary(model)$r.squared
# Step 4: Plot the regression line and confidence interval
ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +  # Scatter plot
geom_smooth(method = "lm", color = "red", fill = "green", level = 0.95) +  # Regression line with 95% CI
annotate("text", x = 10, y = max(data$y) - 50, label = paste("R-squared = ", round(r_squared, 2)), size = 5, color = "darkred") +
labs(title = "Linear Regression with Confidence Interval",
x = "Independent Variable (X)",
y = "Dependent Variable (Y)") +
theme_minimal()
# Load necessary library
library("ISLR")
data('College')
??scatter3D
library(plot3D)
# Step 1: Generate synthetic data
set.seed(123)  # For reproducibility
n <- 100  # Number of data points
x1 <- runif(n, 0, 10)  # Random values for x1
x2 <- runif(n, 0, 10)  # Random values for x2
y <- 5 + 2 * x1 + 3 * x2 + rnorm(n, mean = 0, sd = 5)  # Linear relationship with noise
# Step 2: Create a data frame
data <- data.frame(x1 = x1, x2 = x2, y = y)
# Step 3: Fit a linear model
model <- lm(y ~ x1 + x2)
summary(model)
# create a grid from the x and y values (min to max) and predict values for every point
# this will become the regression plane
grid.lines = 20
x.pred <- seq(min(x1), max(x1), length.out = grid.lines)
y.pred <- seq(min(x2), max(x2), length.out = grid.lines)
xy <- expand.grid( x1 = x.pred, x2 = y.pred)
z.pred <- matrix(predict(model, newdata = xy),
nrow = grid.lines, ncol = grid.lines)
# create the fitted points for droplines to the surface
fitpoints <- predict(model)
# scatter plot with regression plane
scatter3D(x1, x2, y, pch = 19, cex = 1,colvar = NULL, col="red",
theta = 30, phi = 5, bty="b",
xlab = "x1", ylab = "x2", zlab = "y",
surf = list(x = x.pred, y = y.pred, z = z.pred,
facets = TRUE, fit = fitpoints,
col=ramp.col(col = c("dodgerblue3","seagreen2"),
n = 300, alpha=0.9),
border="black"), main = "3D Regression")
