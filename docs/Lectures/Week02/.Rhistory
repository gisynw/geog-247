stu_size <- 250000000
public_use <- c(rep("public", 0.88 * stu_size),rep("nopublic", 0.12 * stu_size))
# 2. Sample 1000 entries without replacement.
p_hat_values <- c()
# Repeat the sampling process 1000 times
for (i in 1:1000) {
# Sample 1000 entries without replacement
sampled_students <- sample(public_use, size = 1000)
# Compute p-hat for the current sample
p_hat_values <- c(p_hat_values, sum(sampled_students == "public") / 1000)
}
# Display the first few p-hat values
head(p_hat_values)
mean(p_hat_values)
# Plot the sampling distribution of p-hat
hist(p_hat_values, main = "Simulated sample proportion", xlab = "sample_proportion", col = "lightblue", border = "white")
library(ggplot2)
# Create a data frame with two normal distributions
data <- data.frame(
x = seq(-5, 8, length.out = 1000),
y1 = dnorm(seq(-5, 8, length.out = 1000), mean = 0, sd = 1),
y2 = dnorm(seq(-5, 8, length.out = 1000), mean = 3, sd = 1)
)
# Plot the two normal distributions using ggplot2
ggplot(data, aes(x = x)) +
geom_line(aes(y = y1, color = "Mean = 0"), size = 1) +
geom_line(aes(y = y2, color = "Mean = 3"), size = 1) +
geom_vline(xintercept = 0, linetype = "dashed", color = "blue", size = 1) +
geom_vline(xintercept = 3, linetype = "dashed", color = "red", size = 1) +
labs(title = "",
x = "x",
y = "Density") +
scale_color_manual(values = c("Mean = 0" = "blue", "Mean = 3" = "red")) +
theme_minimal()
prop.test(x=656, n = 1000, conf.level = 0.95)
library(interpretCI)
install.packages("interpretCI")
library(interpretCI)
x=propCI(n = 1600, p = 0.4, alpha = 0.01)
interpret(x)
library(interpretCI)
x=propCI(n = 1600, p = 0.4, alpha = 0.01)
interpret(x)
n = 1000
p = 0.656
margin <- qnorm(0.95)*sqrt(p*(1-p)/n)
c(p - margin, p + margin)
n = 800
p = 272/800
margin <- qnorm(0.95)*sqrt(p*(1-p)/n)
c(p - margin, p + margin)
qnorm(0.95)
n = 800
p = 272/800
margin <- qnorm(0.975)*sqrt(p*(1-p)/n)
c(p - margin, p + margin)
prop.test(x=272/800, n = 800, conf.level = 0.95)
prop.test(x=272, n = 800, conf.level = 0.95)
prop.test(x=272, n = 800, conf.level = 0.05)
library(interpretCI)
x=propCI(n = 272, p = 800, alpha = 0.05)
library(interpretCI)
x=propCI(n = 800, p = 272/800, alpha = 0.05)
library(interpretCI)
x=propCI(n = 800, p = 272/800, alpha = 0.05)
x
library(interpretCI)
x=propCI(n = 800, p = 272/800, alpha = 0.05)
interpret(x)
library(interpretCI)
x=propCI(n = 800, p = 272/800, alpha = 0.05)
x
n = 800
p = 272/800
margin <- qnorm(0.975)*sqrt(p*(1-p)/n)
margin
c(p - margin, p + margin)
n = 800
p = 272/800
margin <- qnorm(0.975)*sqrt(p*(1-p)/n)
sqrt(p*(1-p)/n)
c(p - margin, p + margin)
library(interpretCI)
x=propCI(n = 800, p = 0.34, alpha = 0.05)
x
n = 800
p = 272/800
se = sqrt(p*(1-p)/n)
print(c('stand error is:', se))
margin <- qnorm(0.975)*se
print(c('margin of error is:', margin))
print(c('confidence interval: ', c(p - margin, p + margin))
n = 800
p = 272/800
se = sqrt(p*(1-p)/n)
print(c('stand error is:', se))
margin <- qnorm(0.975)*se
print(c('margin of error is:', margin))
print(c('confidence interval: ', c(p - margin, p + margin)))
n = 800
p = 272/800
se = sqrt(p*(1-p)/n)
print(c('stand error:', se))
margin <- qnorm(0.975)*se
print(c('margin of error:', margin))
print(c('confidence interval: ', c(p - margin, p + margin)))
n = 800
p = 800*0.34
se = sqrt(p*(1-p)/n)
print(c('stand error:', se))
margin <- qnorm(0.975)*se
print(c('margin of error:', margin))
print(c('confidence interval: ', c(p - margin, p + margin)))
library(interpretCI)
x=propCI(n = 800, p = 0.34, alpha = 0.05)
x
n = 800
p = 0.34
se = sqrt(p*(1-p)/n)
print(c('stand error:', se))
margin <- qnorm(0.975)*se
print(c('margin of error:', margin))
print(c('confidence interval: ', c(p - margin, p + margin)))
count <- 90  # Number of left-handed students in sample
nobs <- 200  # Total number of students
value <- 0.40  # Hypothesized proportion
library(stats)
result <- prop.test(x = 90, n = 200, p = 0.4, alternative = "two.sided", conf.level = 0.95)
# Display the result
print(result)
count <- 1267  # Number of left-handed students in sample
x_prop <- 559  # Total number of students
prop <- 0.46  # Hypothesized proportion
library(stats)
result <- prop.test(x = x_prop, n = count, alternative = "two.sided", conf.level = 0.95)
# Display the result
print(result)
count <- 1267  # Number of left-handed students in sample
x_prop <- 559  # Total number of students
library(stats)
result <- prop.test(x = x_prop, n = count, p = 0.46, alternative = "two.sided", conf.level = 0.95)
# Display the result
print(result)
count <- 1267  # Number of left-handed students in sample
x_prop <- 559  # Total number of students
library(stats)
result <- prop.test(x = x_prop, n = count, p = 0.46, alternative = "two.sided", conf.level = 0.9)
# Display the result
print(result)
p_hat = 559/1267
p_h0 = 0.46
z_0 = p_hat - p_h0 / sqrt((p_h0 * (1-p_h0) / 1267))
z_0
p_hat = 559/1267
p_h0 = 0.46
z_0 = p_hat - p_h0 / sqrt((p_h0 * (1-p_h0)) / 1267)
z_0
p_hat - p_h0
sqrt((p_h0 * (1-p_h0)) / 1267)
p_hat = 559/1267
p_h0 = 0.46
z_0 = (p_hat - p_h0) / sqrt((p_h0 * (1-p_h0)) / 1267)
z_0
p_hat
p_hat = 559/1267
p_h0 = 0.46
z_0 = (p_hat - p_h0) / sqrt((p_h0 * (1-p_h0)) / 1267)
z_0
p_hat = 559/1267
p_h0 = 0.46
z_0 = (p_hat - p_h0) / sqrt((p_h0 * (1-p_h0)) / 1267)
z_0
p_value <- 2 * (1 - pnorm(abs(z_score)))
p_hat = 559/1267
p_h0 = 0.46
z_0 = (p_hat - p_h0) / sqrt((p_h0 * (1-p_h0)) / 1267)
z_0
p_value <- 2 * (1 - pnorm(abs(z_0)))
P_value
p_hat = 559/1267
p_h0 = 0.46
z_0 = (p_hat - p_h0) / sqrt((p_h0 * (1-p_h0)) / 1267)
z_0
p_value <- 2 * (1 - pnorm(abs(z_0)))
p_value
count <- 1267  # Number of left-handed students in sample
x_success <- 559  # Total number of students
library(stats)
result <- prop.test(x = x_success, n = count, p = 0.46, alternative = "two.sided", conf.level = 0.9)
# Display the result
print(result)
p_hat = 559/1267
p_h0 = 0.46
z_0 = (p_hat - p_h0) / sqrt((p_h0 * (1-p_h0)) / 1267)
z_0
p_value <- 2 * (1 - pnorm(abs(z_0)))
p_value
p_hat = 559/1267
p_h0 = 0.46
z_0 = (p_hat - p_h0) / sqrt((p_h0 * (1-p_h0)) / 1267)
z_0^2
p_value <- 2 * (1 - pnorm(abs(z_0)))
p_value
p_hat = 559/1267
p_h0 = 0.46
z_0 = (p_hat - p_h0) / (p_h0 * (1-p_h0) / 1267)
z_0
p_value <- 2 * (1 - pnorm(abs(z_0)))
p_value
p_hat = 559/1267
p_h0 = 0.46
z_0 = (p_hat - p_h0) / sqrt((p_h0 * (1-p_h0) / 1267))
z_0
p_value <- 2 * (1 - pnorm(abs(z_0)))
p_value
p_hat = 559/1267
p_h0 = 0.46
x_squared_corrected <- ((abs(p_hat - p_h0) - (0.5 / count))^2) / (p_h0 * (1 - p_h0) / count)
print(x_squared_corrected)
stu_size <- 250000000
public_use <- c(rep("public", 0.88 * stu_size),rep("nopublic", 0.12 * stu_size))
# 2. Sample 1000 entries without replacement.
p_hat_values <- c()
# Repeat the sampling process 1000 times
for (i in 1:1000) {
# Sample 1000 entries without replacement
sampled_students <- sample(public_use, size = 1000)
# Compute p-hat for the current sample
p_hat_values <- c(p_hat_values, sum(sampled_students == "public") / 1000)
}
# Display the first few p-hat values
head(p_hat_values)
mean(p_hat_values)
# Plot the sampling distribution of p-hat
hist(p_hat_values, main = "Simulated sample proportion", xlab = "sample_proportion", col = "lightblue", border = "white")
library(interpretCI)
x=propCI(n = 1000, p = 0.724, alpha = 0.05)
print(c('95% confidence interval: ', x))
x=propCI(n = 1000, p = 0.724, alpha = 0.01)
print(c('99% confidence interval: ', x))
x=propCI(n = 1000, p = 0.724, alpha = 0.05)
print(c('95% confidence interval: ', x$result$lower, x$result$upper))
x=propCI(n = 1000, p = 0.724, alpha = 0.01)
print(c('99% confidence interval: ',  x$result$lower, x$result$upper))
x <- c(1, 2)
y1 <- c(x_95$result$lower, x_95$result$upper)
y2 <- c(x_99$result$lower, x_99$result$upper)
# Plot empty space with axis limits
plot(x, y1, type = "n", ylim = c(0.65, 0.80), xlab = "X-Axis", ylab = "Y-Axis", main = "Horizontal Lines Example")
x_95=propCI(n = 1000, p = 0.724, alpha = 0.05)
print(c('95% confidence interval: ', x_95$result$lower, x_95$result$upper))
x_99=propCI(n = 1000, p = 0.724, alpha = 0.01)
print(c('99% confidence interval: ',  x_99$result$lower, x_99$result$upper))
x <- c(1, 2)
y1 <- c(x_95$result$lower, x_95$result$upper)
y2 <- c(x_99$result$lower, x_99$result$upper)
# Plot empty space with axis limits
plot(x, y1, type = "n", ylim = c(0.65, 0.80), xlab = "X-Axis", ylab = "Y-Axis", main = "Horizontal Lines Example")
# Add horizontal lines
lines(x, y1, col = "blue", lwd = 2)
lines(x, y2, col = "red", lwd = 2)
plot(0, 0, type = "n", xlim = c(0.65, 0.80), ylim = c(1, 2),
xlab = "Confidence Interval", ylab = "",
main = "Confidence Intervals", axes = FALSE)
# 添加X轴
axis(1, at = seq(0.65, 0.80, by = 0.01))
# 绘制两条水平线表示置信区间
segments(0.69, 1.5, 0.75, 1.5, col = "blue", lwd = 2)  # 第一条线，置信区间 0.69 - 0.75
segments(0.68, 1, 0.76, 1, col = "red", lwd = 2)       # 第二条线，置信区间 0.68 - 0.76
# 添加置信区间的起点和终点标记
points(c(0.69, 0.75), c(1.5, 1.5), pch = 16, col = "blue")
points(c(0.68, 0.76), c(1, 1), pch = 16, col = "red")
# 添加图例
legend("topright", legend = c("CI: 0.69 - 0.75", "CI: 0.68 - 0.76"),
col = c("blue", "red"), lwd = 2, bg = "white")
# 绘制两条水平线表示置信区间
segments(0.69, 1.2, 0.75, 1.2, col = "blue", lwd = 2)  # 第一条线，置信区间 0.69 - 0.75
segments(0.68, 1, 0.76, 1, col = "red", lwd = 2)       # 第二条线，置信区间 0.68 - 0.76
plot(0, 0, type = "n", xlim = c(0.65, 0.80), ylim = c(1, 2),
xlab = "Confidence Interval", ylab = "",
main = "Confidence Intervals", axes = FALSE)
# 添加X轴
axis(1, at = seq(0.65, 0.80, by = 0.01))
# 绘制两条水平线表示置信区间
segments(0.69, 1.2, 0.75, 1.2, col = "blue", lwd = 2)  # 第一条线，置信区间 0.69 - 0.75
segments(0.68, 1.1, 0.76, 1.1, col = "red", lwd = 2)       # 第二条线，置信区间 0.68 - 0.76
# 添加置信区间的起点和终点标记
points(c(0.69, 0.75), c(1.5, 1.5), pch = 16, col = "blue")
points(c(0.68, 0.76), c(1, 1), pch = 16, col = "red")
# 添加图例
legend("topright", legend = c("CI: 0.69 - 0.75", "CI: 0.68 - 0.76"),
col = c("blue", "red"), lwd = 2, bg = "white")
# 添加置信区间的起点和终点标记
points(c(0.69, 0.75), c(1.2, 1.2), pch = 16, col = "blue")
points(c(0.68, 0.76), c(1.1, 1.1), pch = 16, col = "red")
plot(0, 0, type = "n", xlim = c(0.65, 0.80), ylim = c(1, 2),
xlab = "Confidence Interval", ylab = "",
main = "Confidence Intervals", axes = FALSE)
# 添加X轴
axis(1, at = seq(0.65, 0.80, by = 0.01))
# 绘制两条水平线表示置信区间
segments(lower_95, 1.2, upper_95, 1.2, col = "blue", lwd = 2)  # 第一条线，置信区间 0.69 - 0.75
segments(lower_99, 1.1, upper_99, 1.1, col = "red", lwd = 2)       # 第二条线，置信区间 0.68 - 0.76
x_99=propCI(n = 1000, p = 0.724, alpha = 0.01)
lower_99 = x_99$result$lower
upper_99 = x_99$result$upper
print(c('99% confidence interval: ',  lower_99, upper_99))
plot(0, 0, type = "n", xlim = c(0.65, 0.80), ylim = c(1, 2),
xlab = "Confidence Interval", ylab = "",
main = "Confidence Intervals", axes = FALSE)
# 添加X轴
axis(1, at = seq(0.65, 0.80, by = 0.01))
# 绘制两条水平线表示置信区间
segments(lower_95, 1.2, upper_95, 1.2, col = "blue", lwd = 2)  # 第一条线，置信区间 0.69 - 0.75
lower_95
lower_95 = x_95$result$lower
upper_95 = x_95$result$upper
print(c('95% confidence interval: ',lower_95,upper_95 ))
x_99=propCI(n = 1000, p = 0.724, alpha = 0.01)
lower_99 = x_99$result$lower
upper_99 = x_99$result$upper
print(c('99% confidence interval: ',  lower_99, upper_99))
plot(0, 0, type = "n", xlim = c(0.65, 0.80), ylim = c(1, 2),
xlab = "Confidence Interval", ylab = "",
main = "Confidence Intervals", axes = FALSE)
# 添加X轴
axis(1, at = seq(0.65, 0.80, by = 0.01))
# 绘制两条水平线表示置信区间
segments(lower_95, 1.2, upper_95, 1.2, col = "blue", lwd = 2)  # 第一条线，置信区间 0.69 - 0.75
segments(lower_99, 1.1, upper_99, 1.1, col = "red", lwd = 2)       # 第二条线，置信区间 0.68 - 0.76
# 添加置信区间的起点和终点标记
points(c(lower_95, upper_95), c(1.2, 1.2), pch = 16, col = "blue")
points(c(lower_99, upper_99), c(1.1, 1.1), pch = 16, col = "red")
# 添加图例
legend("topright", legend = c("CI: 0.69 - 0.75", "CI: 0.68 - 0.76"),
col = c("blue", "red"), lwd = 2, bg = "white")
lower_95
# 添加图例
legend("topright", legend = c("CI 95%:",lower_95, "-", upper_95, "CI 99%: ", lower_99,"-",lower_99),
col = c("blue", "red"), lwd = 2, bg = "white")
lower_99 = round(x_99$result$lower,3)
upper_99 = round(x_99$result$upper,3)
print(c('99% confidence interval: ',  lower_99, upper_99))
plot(0, 0, type = "n", xlim = c(0.65, 0.80), ylim = c(1, 2),
xlab = "Confidence Interval", ylab = "",
main = "Confidence Intervals", axes = FALSE)
# 添加X轴
axis(1, at = seq(0.65, 0.80, by = 0.01))
# 绘制两条水平线表示置信区间
segments(lower_95, 1.2, upper_95, 1.2, col = "blue", lwd = 2)  # 第一条线，置信区间 0.69 - 0.75
segments(lower_99, 1.1, upper_99, 1.1, col = "red", lwd = 2)       # 第二条线，置信区间 0.68 - 0.76
# 添加置信区间的起点和终点标记
points(c(lower_95, upper_95), c(1.2, 1.2), pch = 16, col = "blue")
points(c(lower_99, upper_99), c(1.1, 1.1), pch = 16, col = "red")
# 添加图例
legend("topright", legend = c("CI 95%:",lower_95, "-", upper_95, "CI 99%: ", lower_99,"-",lower_99),
col = c("blue", "red"), lwd = 2, bg = "white")
library(interpretCI)
x_95=propCI(n = 1000, p = 0.724, alpha = 0.05)
lower_95 = round(x_95$result$lower,3)
upper_95 = round(x_95$result$upper,3)
print(c('95% confidence interval: ',lower_95,upper_95 ))
x_99=propCI(n = 1000, p = 0.724, alpha = 0.01)
lower_99 = round(x_99$result$lower,3)
upper_99 = round(x_99$result$upper,3)
print(c('99% confidence interval: ',  lower_99, upper_99))
plot(0, 0, type = "n", xlim = c(0.65, 0.80), ylim = c(1, 2),
xlab = "Confidence Interval", ylab = "",
main = "Confidence Intervals", axes = FALSE)
# 添加X轴
axis(1, at = seq(0.65, 0.80, by = 0.01))
# 绘制两条水平线表示置信区间
segments(lower_95, 1.2, upper_95, 1.2, col = "blue", lwd = 2)  # 第一条线，置信区间 0.69 - 0.75
segments(lower_99, 1.1, upper_99, 1.1, col = "red", lwd = 2)       # 第二条线，置信区间 0.68 - 0.76
# 添加置信区间的起点和终点标记
points(c(lower_95, upper_95), c(1.2, 1.2), pch = 16, col = "blue")
points(c(lower_99, upper_99), c(1.1, 1.1), pch = 16, col = "red")
# 添加图例
legend("topright", legend = c("CI 95%:",lower_95, "-", upper_95, "CI 99%: ", lower_99,"-",lower_99),
col = c("blue", "red"), lwd = 2, bg = "white")
# 添加图例
legend("topright", legend = c(c("CI 95%:",lower_95, "-", upper_95), c("CI 99%: ", lower_99,"-",lower_99))),
# 添加图例
legend("topright", legend = c(c("CI 95%:",lower_95, "-", upper_95), c("CI 99%: ", lower_99,"-",lower_99)),
col = c("blue", "red"), lwd = 2, bg = "white")
plot(0, 0, type = "n", xlim = c(0.65, 0.80), ylim = c(1, 2),
xlab = "Confidence Interval", ylab = "",
main = "Confidence Intervals", axes = FALSE)
# 添加X轴
axis(1, at = seq(0.65, 0.80, by = 0.01))
# 绘制两条水平线表示置信区间
segments(lower_95, 1.2, upper_95, 1.2, col = "blue", lwd = 2)  # 第一条线，置信区间 0.69 - 0.75
segments(lower_99, 1.1, upper_99, 1.1, col = "red", lwd = 2)       # 第二条线，置信区间 0.68 - 0.76
# 添加置信区间的起点和终点标记
points(c(lower_95, upper_95), c(1.2, 1.2), pch = 16, col = "blue")
points(c(lower_99, upper_99), c(1.1, 1.1), pch = 16, col = "red")
# 添加图例
legend("topright", legend = c(c("CI 95%:",lower_95, "-", upper_95), c("CI 99%: ", lower_99,"-",lower_99)),
col = c("blue", "red"), lwd = 2, bg = "white")
# 添加图例
legend("topright",
legend = c(paste("CI 95%:",lower_95, "-", upper_95), paste("CI 99%: ", lower_99,"-",lower_99)),
col = c("blue", "red"), lwd = 2, bg = "white")
library(interpretCI)
x_95=propCI(n = 1000, p = 0.724, alpha = 0.05)
lower_95 = round(x_95$result$lower,3)
upper_95 = round(x_95$result$upper,3)
print(c('95% confidence interval: ',lower_95,upper_95 ))
x_99=propCI(n = 1000, p = 0.724, alpha = 0.01)
lower_99 = round(x_99$result$lower,3)
upper_99 = round(x_99$result$upper,3)
print(c('99% confidence interval: ',  lower_99, upper_99))
plot(0, 0, type = "n", xlim = c(0.65, 0.80), ylim = c(1, 2),
xlab = "Confidence Interval", ylab = "",
main = "Confidence Intervals", axes = FALSE)
# add x axis
axis(1, at = seq(0.65, 0.80, by = 0.01))
# plot two confidence interval
segments(lower_95, 1.2, upper_95, 1.2, col = "blue", lwd = 2)  # 第一条线，置信区间 0.69 - 0.75
segments(lower_99, 1.1, upper_99, 1.1, col = "red", lwd = 2)       # 第二条线，置信区间 0.68 - 0.76
# add start and end point of confidence interval
points(c(lower_95, upper_95), c(1.2, 1.2), pch = 16, col = "blue")
points(c(lower_99, upper_99), c(1.1, 1.1), pch = 16, col = "red")
# add legend
legend("topright",
legend = c(paste("CI 95%:",lower_95, "-", upper_95), paste("CI 99%: ", lower_99,"-",upper_99)),
col = c("blue", "red"), lwd = 2, bg = "white")
##Task 2.a - b
??MASS::Boston
##Task 2.c
Boston$chas = as.factor(Boston$chas)
hw_sp <- ggplot(Boston, aes(x = rm, y = medv, colour = chas)) +
geom_point() +
scale_colour_brewer(palette = "Set1")
hw_sp + geom_smooth()
library(MASS)
data('Boston')
ggplot(Boston, aes(x = rm, y = medv, colour = indus)) +
geom_point()
##Task 2.c
Boston$chas = as.factor(Boston$chas)
hw_sp <- ggplot(Boston, aes(x = rm, y = medv, colour = chas)) +
geom_point() +
scale_colour_brewer(palette = "Set1")
hw_sp + geom_smooth()
##Task 3.a
library(carData)
data('MplsDemo')
scatterplotMatrix(~population + white + black + hhIncome, data = MplsDemo)
##Task 3.a
library(carData); library(car)
data('MplsDemo')
scatterplotMatrix(~population + white + black + hhIncome, data = MplsDemo)
skewness(MplsDemo$population)
##Task 3.a
library(carData); library(car);library(e1071)
skewness(MplsDemo$population)
skewness(MplsDemo$white)
skewness(MplsDemo$black)
skewness(MplsDemo$hhIncome)
